<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on 歆晨技术笔记</title><link>https://xinchentechnote.github.io/note/post/</link><description>Recent content in Posts on 歆晨技术笔记</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>xinchen@af83f787e8911dea9b3bf677746ebac9</copyright><lastBuildDate>Sun, 25 May 2025 21:20:23 +0800</lastBuildDate><atom:link href="https://xinchentechnote.github.io/note/post/index.xml" rel="self" type="application/rss+xml"/><item><title>C++设计模式一</title><link>https://xinchentechnote.github.io/note/p/c-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%80/</link><pubDate>Sun, 25 May 2025 21:20:23 +0800</pubDate><guid>https://xinchentechnote.github.io/note/p/c-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%80/</guid><description>&lt;h1 id="c-二进制阅读器设计模式总结">C++ 二进制阅读器设计模式总结
&lt;/h1>&lt;p>本文从设计模式角度对一个基于 C++ 的二进制数据阅读器核心模块进行拆解和归纳，详细介绍了如何通过单例、工厂、策略、备忘录、模板与类型特征等模式，使得代码在扩展性、可维护性和灵活性方面达到最优。文末附有一张可在 GitHub 上直接渲染的 Mermaid 类图，帮助直观理解各模块之间的关系。&lt;/p>
&lt;hr>
&lt;h2 id="目录">目录
&lt;/h2>&lt;ol>
&lt;li>&lt;a class="link" href="#%e8%ae%be%e8%ae%a1%e6%a8%a1%e5%bc%8f%e6%a6%82%e8%a7%88" >设计模式概览&lt;/a>
1.1 &lt;a class="link" href="#%e5%8d%95%e4%be%8b%e6%a8%a1%e5%bc%8fsingleton" >单例模式（Singleton）&lt;/a>
1.2 &lt;a class="link" href="#%e5%b7%a5%e5%8e%82%e6%a8%a1%e5%bc%8ffactory" >工厂模式（Factory）&lt;/a>
1.3 &lt;a class="link" href="#%e7%ad%96%e7%95%a5%e6%a8%a1%e5%bc%8fstrategy" >策略模式（Strategy）&lt;/a>
1.4 &lt;a class="link" href="#%e5%a4%87%e5%bf%98%e5%bd%95%e6%a8%a1%e5%bc%8fmemento" >备忘录模式（Memento）&lt;/a>
1.5 &lt;a class="link" href="#%e6%a8%a1%e6%9d%bf%e4%b8%8e%e7%b1%bb%e5%9e%8b%e7%89%b9%e5%be%81template--traits" >模板与类型特征（Template &amp;amp; Traits）&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#%e5%90%84%e6%a8%a1%e5%9d%97%e4%b8%8e%e6%a8%a1%e5%bc%8f%e5%af%b9%e5%ba%94%e5%85%b3%e7%b3%bb" >各模块与模式对应关系&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#mermaid-%e7%b1%bb%e5%9b%be" >Mermaid 类图&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#%e6%95%b4%e4%bd%93%e6%9e%b6%e6%9e%84%e4%b8%8e%e6%80%bb%e7%bb%93" >整体架构与总结&lt;/a>&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2 id="设计模式概览">设计模式概览
&lt;/h2>&lt;h3 id="单例模式singleton">单例模式（Singleton）
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>意图&lt;/strong>：保证一个类只有一个实例，并提供一个全局访问点。&lt;/li>
&lt;li>&lt;strong>应用场景&lt;/strong>：全局类型注册器、全局读取器工厂等需要共享状态的场景。&lt;/li>
&lt;/ul>
&lt;p>在本项目里，以下两个类被设计为单例：&lt;/p>
&lt;ol>
&lt;li>&lt;code>TypeFactory&lt;/code>：维护“类型名称（如 &lt;code>&amp;quot;u8&amp;quot;&lt;/code>、&lt;code>&amp;quot;i16&amp;quot;&lt;/code>）→ &lt;code>std::type_index&lt;/code>”的映射。&lt;/li>
&lt;li>&lt;code>ReaderFactory&lt;/code>：维护“读取类型名称（如 &lt;code>&amp;quot;u8&amp;quot;&lt;/code>、&lt;code>&amp;quot;string@u8&amp;quot;&lt;/code>）→ 对应的 &lt;code>ReaderStrategy&lt;/code> 实例” 的映射。&lt;/li>
&lt;/ol>
&lt;p>典型实现示例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// TypeFactory.hpp
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">TypeFactory&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">TypeFactory&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">instance&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">TypeFactory&lt;/span> &lt;span class="n">inst&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 局部静态变量，C++11 及以后保证线程安全
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">inst&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 删除拷贝/赋值操作符，防止复制
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">TypeFactory&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">TypeFactory&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">delete&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">TypeFactory&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="k">operator&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">TypeFactory&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">delete&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">type_index&lt;/span> &lt;span class="n">getTypeIndex&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">shortName&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="err">…&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">template&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">typename&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="k">static&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">getTypeShortName&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">TypeTraits&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;::&lt;/span>&lt;span class="n">short_name&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// …
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">TypeFactory&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// 私有构造，内部完成所有类型注册
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">TypeFactory&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// 私有析构
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">unordered_map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">type_index&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">type_map_&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// ReaderFactory.hpp
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">ReaderFactory&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">ReaderFactory&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">instance&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">ReaderFactory&lt;/span> &lt;span class="n">inst&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 同样利用局部静态变量保证线程安全
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">inst&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 删除拷贝/赋值操作符
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">ReaderFactory&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">ReaderFactory&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">delete&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ReaderFactory&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="k">operator&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">ReaderFactory&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">delete&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">bool&lt;/span> &lt;span class="nf">read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">AppState&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">typeName&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">auto&lt;/span> &lt;span class="n">it&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">readers_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">find&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">typeName&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">it&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">readers_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">end&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">it&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">second&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">state&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">typeName&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nb">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ReaderFactory&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// 私有构造，内部注册所有 ReaderStrategy
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">ReaderFactory&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">unordered_map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">unique_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ReaderStrategy&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">readers_&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">template&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">typename&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">emplaceReader&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">shortName&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">readers_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">emplace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">shortName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">make_unique&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">TypedReader&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>
&lt;p>&lt;strong>要点&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>私有构造/析构、删除拷贝与赋值，确保只能通过 &lt;code>instance()&lt;/code> 获取实例。&lt;/li>
&lt;li>C++11 后，局部静态变量的初始化线程安全，无需额外加锁。&lt;/li>
&lt;li>单例中持有全局共享的数据（如映射表），只会被创建一次，降低运行时开销。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="工厂模式factory">工厂模式（Factory）
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>&lt;strong>意图&lt;/strong>：将对象的创建与使用解耦，让“谁来创建对象”和“如何创建对象”的逻辑全部集中到一个或几个工厂类里。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>应用场景&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>新增或修改支持的基础类型时，只需在工厂里注册/修改相关逻辑；&lt;/li>
&lt;li>客户端无需直接 &lt;code>new&lt;/code> 某个类型，而是统一通过“类型名称 → 工厂”来获取实例。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="121-typefactory">1.2.1 TypeFactory
&lt;/h4>&lt;ul>
&lt;li>
&lt;p>作用：完成“类型名称 → &lt;code>std::type_index&lt;/code>”的映射与查询。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>内部维护：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">unordered_map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">type_index&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">type_map_&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>构造函数中批量注册所有基础类型：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">TypeFactory&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">TypeFactory&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">type_map_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">emplace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;u8&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">typeid&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">uint8_t&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">type_map_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">emplace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;i16&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">typeid&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int16_t&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">type_map_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">emplace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;f32&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">typeid&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">float&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// …更多类型注册…
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>对外提供：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">type_index&lt;/span> &lt;span class="n">getTypeIndex&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">shortName&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">const&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">template&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">typename&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="k">static&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">getTypeShortName&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">TypeTraits&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;::&lt;/span>&lt;span class="n">short_name&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h4 id="122-readerfactory">1.2.2 ReaderFactory
&lt;/h4>&lt;ul>
&lt;li>
&lt;p>作用：完成“类型名称 → &lt;code>ReaderStrategy&lt;/code> 实例” 的映射与查询。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>内部维护：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">unordered_map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">unique_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ReaderStrategy&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">readers_&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>构造函数中注册各种读取策略：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">ReaderFactory&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">ReaderFactory&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 注册基础整数/浮点类型读取器
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">emplaceReader&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">uint8_t&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;u8&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">emplaceReader&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int16_t&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;i16&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">emplaceReader&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">float&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;f32&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 注册固定长度字符串读取器，例如 &amp;#34;string@8&amp;#34;：读取 8 字节 C 风格字符串
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">readers_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">emplace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;string@8&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">make_unique&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">FixStringReader&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 注册长度前缀字符串读取器，例如 &amp;#34;string@u16&amp;#34;：先读一个 uint16_t 作为长度，再读后续字节
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">readers_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">emplace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;string@u16&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">make_unique&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">LengthPrefixedStringReader&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">uint16_t&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// …更多注册…
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>对外提供：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">bool&lt;/span> &lt;span class="nf">read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">AppState&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">typeName&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">auto&lt;/span> &lt;span class="n">it&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">readers_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">find&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">typeName&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">it&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">readers_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">end&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">it&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">second&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">state&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">typeName&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nb">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>要点&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>将不同类型的“读取逻辑”注册到同一个映射表 &lt;code>readers_&lt;/code> 中；&lt;/li>
&lt;li>客户端只需调用 &lt;code>ReaderFactory::instance().read(state, typeName)&lt;/code> 即可，无需关心内部具体实现；&lt;/li>
&lt;li>新增读取类型时，只要实现新的 &lt;code>ReaderStrategy&lt;/code> 并在构造中注册即可，符合开闭原则。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="策略模式strategy">策略模式（Strategy）
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>意图&lt;/strong>：定义一系列可互换的算法（策略），使它们可以独立于使用它们的客户端而变化。&lt;/li>
&lt;li>&lt;strong>应用场景&lt;/strong>：读取不同类型的数据（基础整数/浮点、固定长度字符串、长度前缀字符串）本质上就是不同的“读取算法”，统一使用相同接口即可实现动态切换。&lt;/li>
&lt;/ul>
&lt;h4 id="131-抽象策略接口readerstrategy">1.3.1 抽象策略接口：&lt;code>ReaderStrategy&lt;/code>
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// ReaderStrategy.hpp
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">ReaderStrategy&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">ReaderStrategy&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">default&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">bool&lt;/span> &lt;span class="nf">read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">AppState&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">typeName&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;strong>核心方法&lt;/strong>：&lt;code>bool read(AppState&amp;amp; state, std::string typeName) const&lt;/code>，接收当前应用状态 &lt;code>AppState&lt;/code> 和待读取数据的“类型名称”，返回是否读取成功，同时在内部更新 &lt;code>AppState&lt;/code>（游标位置、状态消息、历史记录等）。&lt;/li>
&lt;/ul>
&lt;h4 id="132-具体策略">1.3.2 具体策略
&lt;/h4>&lt;ol>
&lt;li>
&lt;p>&lt;strong>TypedReader&lt;T>&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>用于读取定长的基础类型（如 &lt;code>uint8_t&lt;/code>、&lt;code>int16_t&lt;/code>、&lt;code>float&lt;/code> 等）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>通过模板参数 &lt;code>T&lt;/code>，在 &lt;code>read()&lt;/code> 中调用：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">T&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">read&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">state&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">getCursorPos&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">state&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">setStatusMsg&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fmt&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Read {}: {} @ 0x{:X}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Utils&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">format_value&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">state&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">getCursorPos&lt;/span>&lt;span class="p">()));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">return&lt;/span> &lt;span class="nb">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>在 &lt;code>ReaderFactory&lt;/code> 中使用 &lt;code>emplaceReader&amp;lt;uint8_t&amp;gt;(&amp;quot;u8&amp;quot;)&lt;/code>、&lt;code>emplaceReader&amp;lt;int16_t&amp;gt;(&amp;quot;i16&amp;quot;)&lt;/code> 等来注册。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>FixStringReader&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>用于读取“固定长度的 C 风格字符串”，构造时传入一个 &lt;code>size_t length&lt;/code>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>read()&lt;/code> 的实现类似：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">read_fixed_string&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">state&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">getCursorPos&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">length_&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">state&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">setStatusMsg&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fmt&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Read {}: {} @ 0x{:X}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Utils&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">format_value&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">state&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">getCursorPos&lt;/span>&lt;span class="p">()));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">return&lt;/span> &lt;span class="nb">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>LengthPrefixedStringReader&lt;LengthType>&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>用于读取“长度前缀字符串”，模板参数 &lt;code>LengthType&lt;/code>（如 &lt;code>uint8_t&lt;/code>、&lt;code>uint16_t&lt;/code>、&lt;code>uint32_t&lt;/code> 等）代表前缀所占字节数。&lt;/li>
&lt;li>&lt;code>read()&lt;/code> 先调用 &lt;code>state.read&amp;lt;LengthType&amp;gt;(pos)&lt;/code> 得到字符串长度 N，再继续读取 N 字节作为实际字符串，更新状态并记录历史。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>要点&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>各个读取逻辑继承自同一个 &lt;code>ReaderStrategy&lt;/code> 接口；&lt;/li>
&lt;li>在工厂中统一注册（&lt;code>readers_[&amp;quot;u8&amp;quot;] → TypedReader&amp;lt;uint8_t&amp;gt;&lt;/code>、&lt;code>readers_[&amp;quot;string@u8&amp;quot;] → LengthPrefixedStringReader&amp;lt;uint8_t&amp;gt;&lt;/code> 等），客户端只需传入不同的 &lt;code>typeName&lt;/code>，工厂便会选择对应策略执行；&lt;/li>
&lt;li>新增一种读取逻辑（例如“变长压缩整数”），只要实现新的 &lt;code>ReaderStrategy&lt;/code> 子类并在 &lt;code>ReaderFactory&lt;/code> 构造中注册即可，无需改动其它业务代码。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="备忘录模式memento">备忘录模式（Memento）
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>意图&lt;/strong>：在不破坏封装性的前提下，捕获并保存一个对象的内部状态，以便在以后恢复。&lt;/li>
&lt;li>&lt;strong>应用场景&lt;/strong>：用户在任意时刻可以“撤销”最近一次读取，需要记录每次读取前的游标位置与读取到的数据值。&lt;/li>
&lt;/ul>
&lt;h4 id="141-备忘录类record">1.4.1 备忘录类：&lt;code>Record&lt;/code>
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Record.hpp
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="nc">Record&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">size_t&lt;/span> &lt;span class="n">index&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 读取前的光标位置
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">any&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 读取到的值（任意类型）
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">type_name&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 记录类型的名称，便于展示或日志
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">Record&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">size_t&lt;/span> &lt;span class="n">idx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">any&lt;/span> &lt;span class="n">d&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">:&lt;/span> &lt;span class="n">index&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">idx&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">move&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="p">)),&lt;/span> &lt;span class="n">type_name&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">description&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">fmt&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;{} @ 0x{:X}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">type_name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">index&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;strong>职责&lt;/strong>：在“读操作”发生时，先将当前光标 &lt;code>index&lt;/code>、读取到的数据（封装为 &lt;code>std::any&lt;/code>）以及对应的类型名称一起打包成一个 &lt;code>Record&lt;/code>，压入 &lt;code>AppState::read_history&lt;/code> 栈中。&lt;/li>
&lt;/ul>
&lt;h4 id="142-原发器appstate">1.4.2 原发器：&lt;code>AppState&lt;/code>
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// AppState.hpp
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">AppState&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">AppState&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">uint8_t&lt;/span>&lt;span class="o">&amp;gt;&amp;amp;&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">data_&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">template&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">typename&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">T&lt;/span> &lt;span class="n">peek&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">size_t&lt;/span> &lt;span class="n">pos&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 从 data_ 中读取 sizeof(T) 字节并根据小端或大端转换为 T
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">T&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">size_t&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">value&lt;/span> &lt;span class="o">|=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data_&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">pos&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">8&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">));&lt;/span> &lt;span class="c1">// 假设小端字节序
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">template&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">typename&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">T&lt;/span> &lt;span class="n">read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">size_t&lt;/span> &lt;span class="n">pos&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">T&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">peek&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pos&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 在读取前先保存一份“备忘录”到 read_history
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">Record&lt;/span> &lt;span class="n">record&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">pos&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">TypeFactory&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">getTypeShortName&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">()};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">read_history&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">move&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">record&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 将游标往前移动 sizeof(T) 个字节
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">cursor_pos_&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pos&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">status_msg_&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fmt&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Read {}: {} @ 0x{:X}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Utils&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">format_value&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">pos&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">read_fixed_string&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">size_t&lt;/span> &lt;span class="n">pos&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_t&lt;/span> &lt;span class="n">length&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">reinterpret_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">*&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">data_&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">pos&lt;/span>&lt;span class="p">]),&lt;/span> &lt;span class="n">length&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Record&lt;/span> &lt;span class="n">record&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">pos&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">fmt&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;string@{}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">length&lt;/span>&lt;span class="p">)};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">read_history&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">move&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">record&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cursor_pos_&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pos&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">length&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">status_msg_&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fmt&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Read {}: {} @ 0x{:X}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Utils&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">format_value&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">pos&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">template&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">typename&lt;/span> &lt;span class="n">LengthType&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">read_length_prefixed_string&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">size_t&lt;/span> &lt;span class="n">pos&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">LengthType&lt;/span> &lt;span class="n">len&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">read&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">LengthType&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pos&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 递归调用 read&amp;lt;T&amp;gt;，也会记录备忘录
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">size_t&lt;/span> &lt;span class="n">strPos&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pos&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">LengthType&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">reinterpret_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">*&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">data_&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">strPos&lt;/span>&lt;span class="p">]),&lt;/span> &lt;span class="n">len&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Record&lt;/span> &lt;span class="n">record&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">pos&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">fmt&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;string@{}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">TypeFactory&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">getTypeShortName&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">LengthType&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">())};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">read_history&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">move&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">record&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cursor_pos_&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">strPos&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">len&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">status_msg_&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fmt&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Read {}: {} @ 0x{:X}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Utils&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">format_value&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">pos&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">undo&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">read_history&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">empty&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Record&lt;/span> &lt;span class="n">record&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">read_history&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">top&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">read_history&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">pop&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cursor_pos_&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">record&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 恢复到读取前的光标位置
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">status_msg_&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fmt&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Undo to {}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">record&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">description&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">size_t&lt;/span> &lt;span class="nf">getCursorPos&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">cursor_pos_&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">setCursorPos&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">size_t&lt;/span> &lt;span class="n">pos&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">cursor_pos_&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pos&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">getStatusMsg&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">status_msg_&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">stack&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Record&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">getReadHistory&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">read_history&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">uint8_t&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">data_&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 待解析的二进制数据
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">size_t&lt;/span> &lt;span class="n">cursor_pos_&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 当前光标位置
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">status_msg_&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 最近一次操作的状态消息
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">stack&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Record&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">read_history&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>
&lt;p>&lt;strong>要点&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>&lt;code>AppState&lt;/code> 同时扮演了“原发器（Originator）”和“管理者（Caretaker）”的角色；&lt;/li>
&lt;li>每次 &lt;code>read&amp;lt;T&amp;gt;&lt;/code>、&lt;code>read_fixed_string()&lt;/code>、&lt;code>read_length_prefixed_string()&lt;/code> 都会先将当前状态封装到 &lt;code>Record&lt;/code>，再执行真正的读取操作；&lt;/li>
&lt;li>&lt;code>undo()&lt;/code> 从堆栈顶弹出最近的 &lt;code>Record&lt;/code>，并恢复 &lt;code>cursor_pos_&lt;/code>，达到“撤销最近一次读取”的效果；&lt;/li>
&lt;li>通过调用 &lt;code>getReadHistory()&lt;/code> 可以获取整个读取历史栈，便于日志输出或调试。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="模板与类型特征template--traits">模板与类型特征（Template &amp;amp; Traits）
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>&lt;strong>意图&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>利用 C++ 模板生成对不同基础类型（如 &lt;code>uint8_t&lt;/code>、&lt;code>int16_t&lt;/code>、&lt;code>float&lt;/code> 等）的通用读取逻辑，减少重复代码；&lt;/li>
&lt;li>通过“类型特征（Traits）”在编译期将类型与它们对应的名称绑定，方便在程序运行时取得相应字符串。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="151-类型特征typetraitst">1.5.1 类型特征：&lt;code>TypeTraits&amp;lt;T&amp;gt;&lt;/code>
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// TypeTraits.hpp
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">template&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">typename&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">TypeTraits&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 偏特化：uint8_t
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">template&lt;/span> &lt;span class="o">&amp;lt;&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">TypeTraits&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">uint8_t&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="s">&amp;#34;unsigned 8-bit integer&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">short_name&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="s">&amp;#34;u8&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 偏特化：int16_t
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">template&lt;/span> &lt;span class="o">&amp;lt;&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">TypeTraits&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int16_t&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="s">&amp;#34;signed 16-bit integer&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">short_name&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="s">&amp;#34;i16&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 偏特化：float
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">template&lt;/span> &lt;span class="o">&amp;lt;&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">TypeTraits&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">float&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="s">&amp;#34;32-bit floating point&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">short_name&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="s">&amp;#34;f32&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// …其他基础类型的特化…
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>
&lt;p>&lt;strong>对外接口&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">template&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">typename&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">TypeFactory&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">getTypeShortName&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">TypeTraits&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;::&lt;/span>&lt;span class="n">short_name&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h4 id="152-appstatepeekt-与-readt">1.5.2 &lt;code>AppState::peek&amp;lt;T&amp;gt;()&lt;/code> 与 &lt;code>read&amp;lt;T&amp;gt;()&lt;/code>
&lt;/h4>&lt;ul>
&lt;li>
&lt;p>&lt;code>peek&amp;lt;T&amp;gt;(pos)&lt;/code>：&lt;/p>
&lt;ul>
&lt;li>从 &lt;code>data_&lt;/code> 中读取 &lt;code>sizeof(T)&lt;/code> 字节并根据小端或大端转换为类型 &lt;code>T&lt;/code>。&lt;/li>
&lt;li>只做“查看”不修改光标。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>read&amp;lt;T&amp;gt;(pos)&lt;/code>：&lt;/p>
&lt;ul>
&lt;li>调用 &lt;code>peek&amp;lt;T&amp;gt;(pos)&lt;/code> 获取值；&lt;/li>
&lt;li>将 &lt;code>(pos, value, 类型名称)&lt;/code> 封装成 &lt;code>Record&lt;/code> 并压入 &lt;code>read_history&lt;/code>；&lt;/li>
&lt;li>将 &lt;code>cursor_pos_&lt;/code> 往前移动 &lt;code>sizeof(T)&lt;/code> 字节；&lt;/li>
&lt;li>更新 &lt;code>status_msg_&lt;/code> 并返回 &lt;code>value&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>利用模板，&lt;code>AppState::peek&amp;lt;T&amp;gt;&lt;/code> / &lt;code>AppState::read&amp;lt;T&amp;gt;&lt;/code> 对不同基础类型无需写分支，统一由编译器根据 &lt;code>T&lt;/code> 自动生成对应代码。&lt;/p>
&lt;hr>
&lt;h2 id="各模块与模式对应关系">各模块与模式对应关系
&lt;/h2>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>模块 / 类&lt;/th>
&lt;th>设计模式&lt;/th>
&lt;th>说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>TypeFactory&lt;/code>&lt;/td>
&lt;td>Singleton + Factory&lt;/td>
&lt;td>单例：全局只维护一份“类型映射”。&lt;br>工厂：完成“类型名 → std::type_index” 的注册与查询。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>ReaderFactory&lt;/code>&lt;/td>
&lt;td>Singleton + Factory&lt;/td>
&lt;td>单例：全局只维护一份“读取器映射”。&lt;br>工厂：完成“类型名 → ReaderStrategy” 的注册与查询。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>ReaderStrategy&lt;/code>&lt;/td>
&lt;td>Strategy&lt;/td>
&lt;td>算法接口：定义 &lt;code>bool read(AppState&amp;amp;, std::string)&lt;/code>；&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>TypedReader&amp;lt;T&amp;gt;&lt;/code>&lt;/td>
&lt;td>Strategy + Template&lt;/td>
&lt;td>具体策略：读取基础类型 &lt;code>T&lt;/code>。模板化：根据 &lt;code>T&lt;/code> 不同自动生成不同的读取逻辑。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>FixStringReader&lt;/code>&lt;/td>
&lt;td>Strategy&lt;/td>
&lt;td>具体策略：读取固定长度的 C 字符串。构造时传入固定长度 &lt;code>length&lt;/code>。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>LengthPrefixedStringReader&amp;lt;LengthType&amp;gt;&lt;/code>&lt;/td>
&lt;td>Strategy + Template&lt;/td>
&lt;td>具体策略：读取“长度前缀字符串（LengthType 表示前缀宽度）”。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>AppState&lt;/code>&lt;/td>
&lt;td>Memento + Template&lt;/td>
&lt;td>原发器 &amp;amp; 管理者：每次读取前将状态封装成 &lt;code>Record&lt;/code> 存入栈；支持 &lt;code>peek&amp;lt;T&amp;gt;()&lt;/code>、&lt;code>read&amp;lt;T&amp;gt;()&lt;/code>、&lt;code>undo()&lt;/code>。模板化读取减少重复。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>Record&lt;/code>&lt;/td>
&lt;td>Memento&lt;/td>
&lt;td>备忘录：保存“读取前的光标位置 + 读取到的数据 + 类型名称”，由 &lt;code>AppState&lt;/code> 在每次读取时创建并压入 &lt;code>read_history&lt;/code> 栈中；&lt;code>undo()&lt;/code> 时弹出并恢复。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>TypeTraits&amp;lt;T&amp;gt;&lt;/code>&lt;/td>
&lt;td>Traits&lt;/td>
&lt;td>类型特征：在编译期将基础类型 &lt;code>T&lt;/code> 与其“标准名称（name）”和“简短名称（short_name）”关联，为 &lt;code>TypeFactory&lt;/code> 提供映射支持。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>其他辅助&lt;/strong>&lt;/td>
&lt;td>&lt;strong>RAII / STL 容器 / 智能指针&lt;/strong>&lt;/td>
&lt;td>代码中大量使用 &lt;code>std::unique_ptr&amp;lt;ReaderStrategy&amp;gt;&lt;/code>、&lt;code>std::vector&amp;lt;uint8_t&amp;gt;&lt;/code>、&lt;code>std::stack&amp;lt;Record&amp;gt;&lt;/code> 等，均遵循 RAII 思想，无需手动管理内存。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2 id="mermaid-类图">Mermaid 类图
&lt;/h2>&lt;p>下面是一张以 Mermaid 语法编写的类图，将各主要类及其关系直观展现。只需将以下代码块复制到 GitHub 仓库的 Markdown 文件中即可自动渲染：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="lnt">71
&lt;/span>&lt;span class="lnt">72
&lt;/span>&lt;span class="lnt">73
&lt;/span>&lt;span class="lnt">74
&lt;/span>&lt;span class="lnt">75
&lt;/span>&lt;span class="lnt">76
&lt;/span>&lt;span class="lnt">77
&lt;/span>&lt;span class="lnt">78
&lt;/span>&lt;span class="lnt">79
&lt;/span>&lt;span class="lnt">80
&lt;/span>&lt;span class="lnt">81
&lt;/span>&lt;span class="lnt">82
&lt;/span>&lt;span class="lnt">83
&lt;/span>&lt;span class="lnt">84
&lt;/span>&lt;span class="lnt">85
&lt;/span>&lt;span class="lnt">86
&lt;/span>&lt;span class="lnt">87
&lt;/span>&lt;span class="lnt">88
&lt;/span>&lt;span class="lnt">89
&lt;/span>&lt;span class="lnt">90
&lt;/span>&lt;span class="lnt">91
&lt;/span>&lt;span class="lnt">92
&lt;/span>&lt;span class="lnt">93
&lt;/span>&lt;span class="lnt">94
&lt;/span>&lt;span class="lnt">95
&lt;/span>&lt;span class="lnt">96
&lt;/span>&lt;span class="lnt">97
&lt;/span>&lt;span class="lnt">98
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="n">classDiagram&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">%%&lt;/span> &lt;span class="o">================================&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">%%&lt;/span> &lt;span class="err">单例工厂：&lt;/span>&lt;span class="n">TypeFactory&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">%%&lt;/span> &lt;span class="o">================================&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">class&lt;/span> &lt;span class="n">TypeFactory&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="n">Singleton&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">-&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">unordered_map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">type_index&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">type_map_&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">+&lt;/span> &lt;span class="k">static&lt;/span> &lt;span class="n">TypeFactory&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">instance&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">+&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">type_index&lt;/span> &lt;span class="n">getTypeIndex&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">shortName&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">const&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">+&lt;/span> &lt;span class="n">template&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">typename&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="k">static&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">getTypeShortName&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">%%&lt;/span> &lt;span class="o">================================&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">%%&lt;/span> &lt;span class="err">单例工厂：&lt;/span>&lt;span class="n">ReaderFactory&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">%%&lt;/span> &lt;span class="o">================================&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">class&lt;/span> &lt;span class="n">ReaderFactory&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="n">Singleton&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">-&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">unordered_map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ReaderStrategy&lt;/span>&lt;span class="o">*&amp;gt;&lt;/span> &lt;span class="n">readers_&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">+&lt;/span> &lt;span class="k">static&lt;/span> &lt;span class="n">ReaderFactory&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">instance&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">+&lt;/span> &lt;span class="ne">bool&lt;/span> &lt;span class="n">read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">AppState&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">typeName&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">const&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">+&lt;/span> &lt;span class="n">template&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">typename&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">void&lt;/span> &lt;span class="n">emplaceReader&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">shortName&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">%%&lt;/span> &lt;span class="o">================================&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">%%&lt;/span> &lt;span class="err">策略接口：&lt;/span>&lt;span class="n">ReaderStrategy&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">%%&lt;/span> &lt;span class="o">================================&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">class&lt;/span> &lt;span class="n">ReaderStrategy&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="n">Interface&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="n">abstract&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">+&lt;/span> &lt;span class="n">virtual&lt;/span> &lt;span class="ne">bool&lt;/span> &lt;span class="n">read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">AppState&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">typeName&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">%%&lt;/span> &lt;span class="o">================================&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">%%&lt;/span> &lt;span class="err">具体策略：&lt;/span>&lt;span class="n">TypedReader&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">%%&lt;/span> &lt;span class="o">================================&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">class&lt;/span> &lt;span class="n">TypedReader&lt;/span>&lt;span class="o">~&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">~&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">+&lt;/span> &lt;span class="ne">bool&lt;/span> &lt;span class="n">read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">AppState&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">typeName&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">const&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">%%&lt;/span> &lt;span class="o">================================&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">%%&lt;/span> &lt;span class="err">具体策略：&lt;/span>&lt;span class="n">FixStringReader&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">%%&lt;/span> &lt;span class="o">================================&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">class&lt;/span> &lt;span class="n">FixStringReader&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">-&lt;/span> &lt;span class="n">size_t&lt;/span> &lt;span class="n">length_&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">+&lt;/span> &lt;span class="n">FixStringReader&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">size_t&lt;/span> &lt;span class="n">len&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">+&lt;/span> &lt;span class="ne">bool&lt;/span> &lt;span class="n">read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">AppState&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">typeName&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">const&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">%%&lt;/span> &lt;span class="o">================================&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">%%&lt;/span> &lt;span class="err">具体策略：&lt;/span>&lt;span class="n">LengthPrefixedStringReader&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">LengthType&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">%%&lt;/span> &lt;span class="o">================================&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">class&lt;/span> &lt;span class="n">LengthPrefixedStringReader&lt;/span>&lt;span class="o">~&lt;/span>&lt;span class="n">LengthType&lt;/span>&lt;span class="o">~&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">+&lt;/span> &lt;span class="ne">bool&lt;/span> &lt;span class="n">read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">AppState&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">typeName&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">const&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">%%&lt;/span> &lt;span class="o">================================&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">%%&lt;/span> &lt;span class="n">AppState&lt;/span> &lt;span class="err">与&lt;/span> &lt;span class="err">备忘录：&lt;/span>&lt;span class="n">Record&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">%%&lt;/span> &lt;span class="o">================================&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">class&lt;/span> &lt;span class="n">AppState&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">-&lt;/span> &lt;span class="n">size_t&lt;/span> &lt;span class="n">cursor_pos_&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">-&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">stack&lt;/span>&lt;span class="o">~&lt;/span>&lt;span class="n">Record&lt;/span>&lt;span class="o">~&lt;/span> &lt;span class="n">read_history&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">+&lt;/span> &lt;span class="n">template&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">typename&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">T&lt;/span> &lt;span class="n">peek&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">size_t&lt;/span> &lt;span class="n">pos&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">const&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">+&lt;/span> &lt;span class="n">template&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">typename&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">T&lt;/span> &lt;span class="n">read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">size_t&lt;/span> &lt;span class="n">pos&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">+&lt;/span> &lt;span class="n">void&lt;/span> &lt;span class="n">undo&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">+&lt;/span> &lt;span class="n">size_t&lt;/span> &lt;span class="n">getCursorPos&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">+&lt;/span> &lt;span class="n">void&lt;/span> &lt;span class="n">setCursorPos&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">size_t&lt;/span> &lt;span class="n">pos&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">+&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">getStatusMsg&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">class&lt;/span> &lt;span class="n">Record&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">-&lt;/span> &lt;span class="n">size_t&lt;/span> &lt;span class="n">index&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">-&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">any&lt;/span> &lt;span class="n">data&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">-&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">type_name&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">+&lt;/span> &lt;span class="n">Record&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">size_t&lt;/span> &lt;span class="n">idx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">any&lt;/span> &lt;span class="n">d&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">+&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">description&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">%%&lt;/span> &lt;span class="o">================================&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">%%&lt;/span> &lt;span class="err">类型特征：&lt;/span>&lt;span class="n">TypeTraits&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">%%&lt;/span> &lt;span class="o">================================&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">class&lt;/span> &lt;span class="n">TypeTraits&lt;/span>&lt;span class="o">~&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">~&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="n">interface&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">+&lt;/span> &lt;span class="k">static&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">+&lt;/span> &lt;span class="k">static&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">short_name&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">%%&lt;/span> &lt;span class="o">================================&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">%%&lt;/span> &lt;span class="err">类之间关系&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">%%&lt;/span> &lt;span class="o">================================&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">TypeFactory&lt;/span> &lt;span class="o">--&amp;gt;&lt;/span> &lt;span class="s2">&amp;#34;uses&amp;#34;&lt;/span> &lt;span class="n">TypeTraits&lt;/span>&lt;span class="o">~&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">~&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ReaderFactory&lt;/span> &lt;span class="o">--&amp;gt;&lt;/span> &lt;span class="n">ReaderStrategy&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">maintains&lt;/span> &lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ReaderFactory&lt;/span> &lt;span class="o">--&amp;gt;&lt;/span> &lt;span class="n">TypeFactory&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">uses&lt;/span> &lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">TypedReader&lt;/span>&lt;span class="o">~&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">~&lt;/span> &lt;span class="o">..|&amp;gt;&lt;/span> &lt;span class="n">ReaderStrategy&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">implements&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">FixStringReader&lt;/span> &lt;span class="o">..|&amp;gt;&lt;/span> &lt;span class="n">ReaderStrategy&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">implements&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">LengthPrefixedStringReader&lt;/span>&lt;span class="o">~&lt;/span>&lt;span class="n">LengthType&lt;/span>&lt;span class="o">~&lt;/span> &lt;span class="o">..|&amp;gt;&lt;/span> &lt;span class="n">ReaderStrategy&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">implements&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">AppState&lt;/span> &lt;span class="o">--&amp;gt;&lt;/span> &lt;span class="n">Record&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">writes&lt;/span> &lt;span class="n">to&lt;/span> &lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">AppState&lt;/span> &lt;span class="o">--&amp;gt;&lt;/span> &lt;span class="n">ReaderFactory&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">calls&lt;/span> &lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Record&lt;/span> &lt;span class="o">..|&amp;gt;&lt;/span> &lt;span class="n">Memento&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">pattern&lt;/span> &lt;span class="n">role&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>说明：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;code>&amp;lt;&amp;lt;Singleton&amp;gt;&amp;gt;&lt;/code> 表示单例类；&lt;/li>
&lt;li>&lt;code>&amp;lt;&amp;lt;Interface&amp;gt;&amp;gt;&lt;/code> 表示策略接口；&lt;/li>
&lt;li>模板类用 &lt;code>~T~&lt;/code> 或 &lt;code>~LengthType~&lt;/code> 表示泛型参数；&lt;/li>
&lt;li>箭头 &lt;code>--&amp;gt;&lt;/code> 表示依赖或使用关系；&lt;/li>
&lt;li>实线半空心箭头 &lt;code>..|&amp;gt;&lt;/code> 表示继承或实现关系；&lt;/li>
&lt;li>&lt;code>Memento&lt;/code> 仅作模式角色标注，无对应实际 C++ 类。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="整体架构与总结">整体架构与总结
&lt;/h2>&lt;ol>
&lt;li>
&lt;p>&lt;strong>解耦与可扩展&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>通过 &lt;strong>单例 + 工厂模式&lt;/strong>，将“类型注册”、“读取器注册”、“具体读取逻辑”集中管理：&lt;/p>
&lt;ul>
&lt;li>要新增基础类型，只需在 &lt;code>TypeFactory&lt;/code> 中注册；&lt;/li>
&lt;li>要新增读取方式，只需继承 &lt;code>ReaderStrategy&lt;/code> 并在 &lt;code>ReaderFactory&lt;/code> 注册。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>客户端（通常是 UI 或命令行解析）只需调用：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">bool&lt;/span> &lt;span class="n">ok&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ReaderFactory&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">instance&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">state&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">typeName&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>即可完成从字节流中解析“类型为 typeName 的数据”。整个流程对客户端透明，无需了解内部实现细节。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>可撤销的读取（Undo）&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>通过 &lt;strong>备忘录模式&lt;/strong>，每次读取前将当前光标位置和将要读取的数据值打包成 &lt;code>Record&lt;/code> 并压入栈中。&lt;/li>
&lt;li>用户若需撤销，只需调用 &lt;code>AppState::undo()&lt;/code>，即可将光标回退到上一次读取前的位置，并在状态消息里提示 “Undo to …”。&lt;/li>
&lt;li>可以轻松扩展为多级撤销、Redo（只需另维护一个“重做栈”）等。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>模板与类型特征&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;code>TypeTraits&amp;lt;T&amp;gt;&lt;/code> 在编译期将 &lt;code>T&lt;/code> 与其名称绑定，配合 &lt;code>TypeFactory&lt;/code> 实现“类型名称 ↔ typeid” 的双向映射。&lt;/li>
&lt;li>&lt;code>AppState::peek&amp;lt;T&amp;gt;()&lt;/code> / &lt;code>read&amp;lt;T&amp;gt;()&lt;/code> 与 &lt;code>TypedReader&amp;lt;T&amp;gt;&lt;/code>，利用模板自动生成不同数据宽度的读取代码，避免了手写大量类似的函数。&lt;/li>
&lt;li>如果需要在不同字节序（小端/大端）之间切换，只需在 &lt;code>peek&amp;lt;T&amp;gt;()&lt;/code> 内添加条件分支或再提供另一个 &lt;code>EndianTraits&lt;/code> 即可。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>整体调用流程示例&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 假设 dataVec 存放了待解析的二进制数据
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">AppState&lt;/span> &lt;span class="nf">state&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dataVec&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 用户想读取一个 16 位带符号整数 (i16)：
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">ReaderFactory&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">instance&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">state&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;i16&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">getStatusMsg&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;无法解析类型 i16&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 继续读取一个长度前缀字符串 (string@u16)：
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">ReaderFactory&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">instance&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">state&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;string@u16&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">getStatusMsg&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 如果发生了误操作，用户想撤销最近一次读取：
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">state&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">undo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">getStatusMsg&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 输出类似 &amp;#34;Undo to i16 @ 0x02&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>优势与扩展思路&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>新增类型/读取方式&lt;/strong>：在 &lt;code>TypeFactory&lt;/code> 或 &lt;code>ReaderFactory&lt;/code> 中添加注册逻辑即可，无需改动客户端调用。&lt;/li>
&lt;li>&lt;strong>支持更多复杂读取&lt;/strong>：如果想读取压缩整数（varint）、位域（bitfield）或自定义协议，只需新建子类继承 &lt;code>ReaderStrategy&lt;/code>，并在工厂里注册。&lt;/li>
&lt;li>&lt;strong>可重做（Redo）功能&lt;/strong>：只要在 &lt;code>undo()&lt;/code> 中将弹出的 &lt;code>Record&lt;/code> 同时推入一个“重做栈”，再实现 &lt;code>redo()&lt;/code> 即可。&lt;/li>
&lt;li>&lt;strong>可视化/调试&lt;/strong>：通过 &lt;code>AppState::getReadHistory()&lt;/code> 获取完整的读取记录栈，可输出到日志或在 GUI 中展示。&lt;/li>
&lt;li>&lt;strong>跨平台字节序&lt;/strong>：如果需要兼容大端机器，可在 &lt;code>peek&amp;lt;T&amp;gt;()&lt;/code> 中根据运行时判断或模板参数做相应调整。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;blockquote>
&lt;p>&lt;strong>本文所有代码示例均可在 C++11 以上版本下编译运行。&lt;/strong>
若使用更高版本（C++17、C++20），可结合 &lt;code>std::byte&lt;/code>、&lt;code>std::variant&lt;/code>、&lt;code>std::optional&lt;/code> 等特性，进一步优化类型安全和可读性。&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;p>&lt;em>作者：xinchen&lt;/em>
&lt;em>首次发布日期：2025-05-25&lt;/em>
&lt;em>版权所有 © 2025&lt;/em>
&lt;em>作者信息：af83f787e8911dea9b3bf677746ebac9&lt;/em>&lt;/p></description></item><item><title>基于python的struct模块实现简单的ByteBuf</title><link>https://xinchentechnote.github.io/note/p/%E5%9F%BA%E4%BA%8Epython%E7%9A%84struct%E6%A8%A1%E5%9D%97%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84bytebuf/</link><pubDate>Sun, 11 May 2025 18:29:30 +0800</pubDate><guid>https://xinchentechnote.github.io/note/p/%E5%9F%BA%E4%BA%8Epython%E7%9A%84struct%E6%A8%A1%E5%9D%97%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84bytebuf/</guid><description>&lt;h1 id="基于python的struct模块实现简单的bytebuf">基于python的struct模块实现简单的ByteBuf
&lt;/h1>&lt;h3 id="写在前面">&lt;strong>写在前面&lt;/strong>
&lt;/h3>&lt;p>在网络编程中需要将消息序列化为二进制序列打包传输。python标准库中的struct模块提供了pack、unpack等函数将基本数据类型转换为对应的bytes数组。使用pack、unpack需要在传参是需要关注字节序（大小端）、格式等，其中字节序有@、=、&amp;lt;、&amp;gt;、！五种，格式约21种，使用成本相对高。所以参考Netty的ByteBuf及Rust的bytes库中的Buf、BufMut为Python简单封装一个类似的ByteBuf。&lt;/p>
&lt;p>netty中ByteBuf的基本结构如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"> +-------------------+------------------+------------------+
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> | discardable bytes | readable bytes | writable bytes |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> | | (CONTENT) | |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> +-------------------+------------------+------------------+
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> | | | |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0 &amp;lt;= readerIndex &amp;lt;= writerIndex &amp;lt;= capacity
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="一buf接口设计">&lt;strong>一、Buf接口设计&lt;/strong>
&lt;/h3>&lt;p>&lt;img src="https://xinchentechnote.github.io/note/note/images/pasted-image-20220405221600.png"
loading="lazy"
alt="Buf接口"
>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt"> 10
&lt;/span>&lt;span class="lnt"> 11
&lt;/span>&lt;span class="lnt"> 12
&lt;/span>&lt;span class="lnt"> 13
&lt;/span>&lt;span class="lnt"> 14
&lt;/span>&lt;span class="lnt"> 15
&lt;/span>&lt;span class="lnt"> 16
&lt;/span>&lt;span class="lnt"> 17
&lt;/span>&lt;span class="lnt"> 18
&lt;/span>&lt;span class="lnt"> 19
&lt;/span>&lt;span class="lnt"> 20
&lt;/span>&lt;span class="lnt"> 21
&lt;/span>&lt;span class="lnt"> 22
&lt;/span>&lt;span class="lnt"> 23
&lt;/span>&lt;span class="lnt"> 24
&lt;/span>&lt;span class="lnt"> 25
&lt;/span>&lt;span class="lnt"> 26
&lt;/span>&lt;span class="lnt"> 27
&lt;/span>&lt;span class="lnt"> 28
&lt;/span>&lt;span class="lnt"> 29
&lt;/span>&lt;span class="lnt"> 30
&lt;/span>&lt;span class="lnt"> 31
&lt;/span>&lt;span class="lnt"> 32
&lt;/span>&lt;span class="lnt"> 33
&lt;/span>&lt;span class="lnt"> 34
&lt;/span>&lt;span class="lnt"> 35
&lt;/span>&lt;span class="lnt"> 36
&lt;/span>&lt;span class="lnt"> 37
&lt;/span>&lt;span class="lnt"> 38
&lt;/span>&lt;span class="lnt"> 39
&lt;/span>&lt;span class="lnt"> 40
&lt;/span>&lt;span class="lnt"> 41
&lt;/span>&lt;span class="lnt"> 42
&lt;/span>&lt;span class="lnt"> 43
&lt;/span>&lt;span class="lnt"> 44
&lt;/span>&lt;span class="lnt"> 45
&lt;/span>&lt;span class="lnt"> 46
&lt;/span>&lt;span class="lnt"> 47
&lt;/span>&lt;span class="lnt"> 48
&lt;/span>&lt;span class="lnt"> 49
&lt;/span>&lt;span class="lnt"> 50
&lt;/span>&lt;span class="lnt"> 51
&lt;/span>&lt;span class="lnt"> 52
&lt;/span>&lt;span class="lnt"> 53
&lt;/span>&lt;span class="lnt"> 54
&lt;/span>&lt;span class="lnt"> 55
&lt;/span>&lt;span class="lnt"> 56
&lt;/span>&lt;span class="lnt"> 57
&lt;/span>&lt;span class="lnt"> 58
&lt;/span>&lt;span class="lnt"> 59
&lt;/span>&lt;span class="lnt"> 60
&lt;/span>&lt;span class="lnt"> 61
&lt;/span>&lt;span class="lnt"> 62
&lt;/span>&lt;span class="lnt"> 63
&lt;/span>&lt;span class="lnt"> 64
&lt;/span>&lt;span class="lnt"> 65
&lt;/span>&lt;span class="lnt"> 66
&lt;/span>&lt;span class="lnt"> 67
&lt;/span>&lt;span class="lnt"> 68
&lt;/span>&lt;span class="lnt"> 69
&lt;/span>&lt;span class="lnt"> 70
&lt;/span>&lt;span class="lnt"> 71
&lt;/span>&lt;span class="lnt"> 72
&lt;/span>&lt;span class="lnt"> 73
&lt;/span>&lt;span class="lnt"> 74
&lt;/span>&lt;span class="lnt"> 75
&lt;/span>&lt;span class="lnt"> 76
&lt;/span>&lt;span class="lnt"> 77
&lt;/span>&lt;span class="lnt"> 78
&lt;/span>&lt;span class="lnt"> 79
&lt;/span>&lt;span class="lnt"> 80
&lt;/span>&lt;span class="lnt"> 81
&lt;/span>&lt;span class="lnt"> 82
&lt;/span>&lt;span class="lnt"> 83
&lt;/span>&lt;span class="lnt"> 84
&lt;/span>&lt;span class="lnt"> 85
&lt;/span>&lt;span class="lnt"> 86
&lt;/span>&lt;span class="lnt"> 87
&lt;/span>&lt;span class="lnt"> 88
&lt;/span>&lt;span class="lnt"> 89
&lt;/span>&lt;span class="lnt"> 90
&lt;/span>&lt;span class="lnt"> 91
&lt;/span>&lt;span class="lnt"> 92
&lt;/span>&lt;span class="lnt"> 93
&lt;/span>&lt;span class="lnt"> 94
&lt;/span>&lt;span class="lnt"> 95
&lt;/span>&lt;span class="lnt"> 96
&lt;/span>&lt;span class="lnt"> 97
&lt;/span>&lt;span class="lnt"> 98
&lt;/span>&lt;span class="lnt"> 99
&lt;/span>&lt;span class="lnt">100
&lt;/span>&lt;span class="lnt">101
&lt;/span>&lt;span class="lnt">102
&lt;/span>&lt;span class="lnt">103
&lt;/span>&lt;span class="lnt">104
&lt;/span>&lt;span class="lnt">105
&lt;/span>&lt;span class="lnt">106
&lt;/span>&lt;span class="lnt">107
&lt;/span>&lt;span class="lnt">108
&lt;/span>&lt;span class="lnt">109
&lt;/span>&lt;span class="lnt">110
&lt;/span>&lt;span class="lnt">111
&lt;/span>&lt;span class="lnt">112
&lt;/span>&lt;span class="lnt">113
&lt;/span>&lt;span class="lnt">114
&lt;/span>&lt;span class="lnt">115
&lt;/span>&lt;span class="lnt">116
&lt;/span>&lt;span class="lnt">117
&lt;/span>&lt;span class="lnt">118
&lt;/span>&lt;span class="lnt">119
&lt;/span>&lt;span class="lnt">120
&lt;/span>&lt;span class="lnt">121
&lt;/span>&lt;span class="lnt">122
&lt;/span>&lt;span class="lnt">123
&lt;/span>&lt;span class="lnt">124
&lt;/span>&lt;span class="lnt">125
&lt;/span>&lt;span class="lnt">126
&lt;/span>&lt;span class="lnt">127
&lt;/span>&lt;span class="lnt">128
&lt;/span>&lt;span class="lnt">129
&lt;/span>&lt;span class="lnt">130
&lt;/span>&lt;span class="lnt">131
&lt;/span>&lt;span class="lnt">132
&lt;/span>&lt;span class="lnt">133
&lt;/span>&lt;span class="lnt">134
&lt;/span>&lt;span class="lnt">135
&lt;/span>&lt;span class="lnt">136
&lt;/span>&lt;span class="lnt">137
&lt;/span>&lt;span class="lnt">138
&lt;/span>&lt;span class="lnt">139
&lt;/span>&lt;span class="lnt">140
&lt;/span>&lt;span class="lnt">141
&lt;/span>&lt;span class="lnt">142
&lt;/span>&lt;span class="lnt">143
&lt;/span>&lt;span class="lnt">144
&lt;/span>&lt;span class="lnt">145
&lt;/span>&lt;span class="lnt">146
&lt;/span>&lt;span class="lnt">147
&lt;/span>&lt;span class="lnt">148
&lt;/span>&lt;span class="lnt">149
&lt;/span>&lt;span class="lnt">150
&lt;/span>&lt;span class="lnt">151
&lt;/span>&lt;span class="lnt">152
&lt;/span>&lt;span class="lnt">153
&lt;/span>&lt;span class="lnt">154
&lt;/span>&lt;span class="lnt">155
&lt;/span>&lt;span class="lnt">156
&lt;/span>&lt;span class="lnt">157
&lt;/span>&lt;span class="lnt">158
&lt;/span>&lt;span class="lnt">159
&lt;/span>&lt;span class="lnt">160
&lt;/span>&lt;span class="lnt">161
&lt;/span>&lt;span class="lnt">162
&lt;/span>&lt;span class="lnt">163
&lt;/span>&lt;span class="lnt">164
&lt;/span>&lt;span class="lnt">165
&lt;/span>&lt;span class="lnt">166
&lt;/span>&lt;span class="lnt">167
&lt;/span>&lt;span class="lnt">168
&lt;/span>&lt;span class="lnt">169
&lt;/span>&lt;span class="lnt">170
&lt;/span>&lt;span class="lnt">171
&lt;/span>&lt;span class="lnt">172
&lt;/span>&lt;span class="lnt">173
&lt;/span>&lt;span class="lnt">174
&lt;/span>&lt;span class="lnt">175
&lt;/span>&lt;span class="lnt">176
&lt;/span>&lt;span class="lnt">177
&lt;/span>&lt;span class="lnt">178
&lt;/span>&lt;span class="lnt">179
&lt;/span>&lt;span class="lnt">180
&lt;/span>&lt;span class="lnt">181
&lt;/span>&lt;span class="lnt">182
&lt;/span>&lt;span class="lnt">183
&lt;/span>&lt;span class="lnt">184
&lt;/span>&lt;span class="lnt">185
&lt;/span>&lt;span class="lnt">186
&lt;/span>&lt;span class="lnt">187
&lt;/span>&lt;span class="lnt">188
&lt;/span>&lt;span class="lnt">189
&lt;/span>&lt;span class="lnt">190
&lt;/span>&lt;span class="lnt">191
&lt;/span>&lt;span class="lnt">192
&lt;/span>&lt;span class="lnt">193
&lt;/span>&lt;span class="lnt">194
&lt;/span>&lt;span class="lnt">195
&lt;/span>&lt;span class="lnt">196
&lt;/span>&lt;span class="lnt">197
&lt;/span>&lt;span class="lnt">198
&lt;/span>&lt;span class="lnt">199
&lt;/span>&lt;span class="lnt">200
&lt;/span>&lt;span class="lnt">201
&lt;/span>&lt;span class="lnt">202
&lt;/span>&lt;span class="lnt">203
&lt;/span>&lt;span class="lnt">204
&lt;/span>&lt;span class="lnt">205
&lt;/span>&lt;span class="lnt">206
&lt;/span>&lt;span class="lnt">207
&lt;/span>&lt;span class="lnt">208
&lt;/span>&lt;span class="lnt">209
&lt;/span>&lt;span class="lnt">210
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">import abc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">import struct
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">from numpy import longlong
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">https://netty.io/4.0/api/io/netty/buffer/ByteBuf.html
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">https://docs.oracle.com/javase/8/docs/api/java/nio/ByteBuffer.html
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">https://docs.rs/bytes/1.1.0/bytes/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">class Buf(metaclass=abc.ABCMeta):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> class ByteOrder:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> NATIVE = &amp;#39;@&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> STD_NATIVE = &amp;#39;=&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> LITTLE_ENDIAN = &amp;#39;&amp;lt;&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> BIG_ENDIAN = &amp;#39;&amp;gt;&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> NETWORK = &amp;#39;!&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> PAD_BYTE = &amp;#39;x&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> CHAR = &amp;#39;c&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> SIGNED_CHAR = &amp;#39;b&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> UNSIGNED_CHAR = &amp;#39;B&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> BOOLEAN = &amp;#39;?&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> SHORT = &amp;#39;h&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> UNSIGNED_SHORT = &amp;#39;H&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> INT = &amp;#39;i&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> UNSIGNED_INT = &amp;#39;I&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> LONG = &amp;#39;l&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> UNSIGNED_LONG = &amp;#39;L&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> LONG_LONG = &amp;#39;q&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> UNSIGNED_LONG_LONG = &amp;#39;Q&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> SSIZE_T = &amp;#39;n&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> SIZE_T = &amp;#39;N&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> EXPONENT = &amp;#39;e&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> FLOAT = &amp;#39;f&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> DOUBLE = &amp;#39;d&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> CHAR_ARR = &amp;#39;s&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> CHAR_ARR1 = &amp;#39;p&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> VOID = &amp;#39;P&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @abc.abstractmethod
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def readable_bytes_len(self) -&amp;gt; int:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pass
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @abc.abstractmethod
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def to_bytes(self) -&amp;gt; bytearray:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pass
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @abc.abstractmethod
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def write_i8(self, value: int):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pass
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @abc.abstractmethod
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def write_u8(self, value: int):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pass
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @abc.abstractmethod
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def write_bool(self, value: bool):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pass
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @abc.abstractmethod
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def write_i16(self, value: int):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pass
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @abc.abstractmethod
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def write_i16_le(self, value: int):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pass
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @abc.abstractmethod
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def write_u16(self, value: int):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pass
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @abc.abstractmethod
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def write_u16_le(self, value: int):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pass
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @abc.abstractmethod
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def write_i32(self, value: int):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pass
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @abc.abstractmethod
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def write_i32_le(self, value: int):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pass
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @abc.abstractmethod
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def write_u32(self, value: int):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pass
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @abc.abstractmethod
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def write_u32_le(self, value: int):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pass
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @abc.abstractmethod
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def write_i64(self, value: longlong):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pass
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @abc.abstractmethod
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def write_i64_le(self, value: longlong):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pass
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @abc.abstractmethod
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def write_u64(self, value: longlong):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pass
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @abc.abstractmethod
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def write_u64_le(self, value: longlong):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pass
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @abc.abstractmethod
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def write_f32(self, value: float):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pass
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @abc.abstractmethod
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def write_f32_le(self, value: float):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pass
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @abc.abstractmethod
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def write_f64(self, value: float):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pass
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @abc.abstractmethod
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def write_f64_le(self, value: float):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pass
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @abc.abstractmethod
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def write_bytes(self, value: bytes):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pass
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @abc.abstractmethod
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def read_i8(self):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pass
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @abc.abstractmethod
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def read_u8(self):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pass
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @abc.abstractmethod
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def read_bool(self):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pass
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @abc.abstractmethod
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def read_i16(self):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pass
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @abc.abstractmethod
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def read_i16_le(self):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pass
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @abc.abstractmethod
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def read_u16(self):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pass
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @abc.abstractmethod
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def read_u16_le(self):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pass
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @abc.abstractmethod
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def read_i32(self):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pass
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @abc.abstractmethod
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def read_i32_le(self):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pass
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @abc.abstractmethod
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def read_u32(self):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pass
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @abc.abstractmethod
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def read_u32_le(self):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pass
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @abc.abstractmethod
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def read_i64(self):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pass
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @abc.abstractmethod
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def read_i64_le(self):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pass
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @abc.abstractmethod
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def read_u64(self):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pass
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @abc.abstractmethod
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def read_u64_le(self):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pass
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @abc.abstractmethod
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def read_f32(self):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pass
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @abc.abstractmethod
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def read_f32_le(self):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pass
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @abc.abstractmethod
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def read_f64(self):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pass
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @abc.abstractmethod
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def read_f64_le(self):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pass
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @abc.abstractmethod
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def read_bytes(self, length: int) -&amp;gt; bytes:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pass
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="二bytebuf具体实现">&lt;strong>二、ByteBuf具体实现&lt;/strong>
&lt;/h3>&lt;p>ByteBuf底层使用可以字节数组bytearray作存储，记录分别读写的位置。
&lt;img src="https://xinchentechnote.github.io/note/note/images/pasted-image-20220405221730.png"
loading="lazy"
alt="ByteBuf"
>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt"> 10
&lt;/span>&lt;span class="lnt"> 11
&lt;/span>&lt;span class="lnt"> 12
&lt;/span>&lt;span class="lnt"> 13
&lt;/span>&lt;span class="lnt"> 14
&lt;/span>&lt;span class="lnt"> 15
&lt;/span>&lt;span class="lnt"> 16
&lt;/span>&lt;span class="lnt"> 17
&lt;/span>&lt;span class="lnt"> 18
&lt;/span>&lt;span class="lnt"> 19
&lt;/span>&lt;span class="lnt"> 20
&lt;/span>&lt;span class="lnt"> 21
&lt;/span>&lt;span class="lnt"> 22
&lt;/span>&lt;span class="lnt"> 23
&lt;/span>&lt;span class="lnt"> 24
&lt;/span>&lt;span class="lnt"> 25
&lt;/span>&lt;span class="lnt"> 26
&lt;/span>&lt;span class="lnt"> 27
&lt;/span>&lt;span class="lnt"> 28
&lt;/span>&lt;span class="lnt"> 29
&lt;/span>&lt;span class="lnt"> 30
&lt;/span>&lt;span class="lnt"> 31
&lt;/span>&lt;span class="lnt"> 32
&lt;/span>&lt;span class="lnt"> 33
&lt;/span>&lt;span class="lnt"> 34
&lt;/span>&lt;span class="lnt"> 35
&lt;/span>&lt;span class="lnt"> 36
&lt;/span>&lt;span class="lnt"> 37
&lt;/span>&lt;span class="lnt"> 38
&lt;/span>&lt;span class="lnt"> 39
&lt;/span>&lt;span class="lnt"> 40
&lt;/span>&lt;span class="lnt"> 41
&lt;/span>&lt;span class="lnt"> 42
&lt;/span>&lt;span class="lnt"> 43
&lt;/span>&lt;span class="lnt"> 44
&lt;/span>&lt;span class="lnt"> 45
&lt;/span>&lt;span class="lnt"> 46
&lt;/span>&lt;span class="lnt"> 47
&lt;/span>&lt;span class="lnt"> 48
&lt;/span>&lt;span class="lnt"> 49
&lt;/span>&lt;span class="lnt"> 50
&lt;/span>&lt;span class="lnt"> 51
&lt;/span>&lt;span class="lnt"> 52
&lt;/span>&lt;span class="lnt"> 53
&lt;/span>&lt;span class="lnt"> 54
&lt;/span>&lt;span class="lnt"> 55
&lt;/span>&lt;span class="lnt"> 56
&lt;/span>&lt;span class="lnt"> 57
&lt;/span>&lt;span class="lnt"> 58
&lt;/span>&lt;span class="lnt"> 59
&lt;/span>&lt;span class="lnt"> 60
&lt;/span>&lt;span class="lnt"> 61
&lt;/span>&lt;span class="lnt"> 62
&lt;/span>&lt;span class="lnt"> 63
&lt;/span>&lt;span class="lnt"> 64
&lt;/span>&lt;span class="lnt"> 65
&lt;/span>&lt;span class="lnt"> 66
&lt;/span>&lt;span class="lnt"> 67
&lt;/span>&lt;span class="lnt"> 68
&lt;/span>&lt;span class="lnt"> 69
&lt;/span>&lt;span class="lnt"> 70
&lt;/span>&lt;span class="lnt"> 71
&lt;/span>&lt;span class="lnt"> 72
&lt;/span>&lt;span class="lnt"> 73
&lt;/span>&lt;span class="lnt"> 74
&lt;/span>&lt;span class="lnt"> 75
&lt;/span>&lt;span class="lnt"> 76
&lt;/span>&lt;span class="lnt"> 77
&lt;/span>&lt;span class="lnt"> 78
&lt;/span>&lt;span class="lnt"> 79
&lt;/span>&lt;span class="lnt"> 80
&lt;/span>&lt;span class="lnt"> 81
&lt;/span>&lt;span class="lnt"> 82
&lt;/span>&lt;span class="lnt"> 83
&lt;/span>&lt;span class="lnt"> 84
&lt;/span>&lt;span class="lnt"> 85
&lt;/span>&lt;span class="lnt"> 86
&lt;/span>&lt;span class="lnt"> 87
&lt;/span>&lt;span class="lnt"> 88
&lt;/span>&lt;span class="lnt"> 89
&lt;/span>&lt;span class="lnt"> 90
&lt;/span>&lt;span class="lnt"> 91
&lt;/span>&lt;span class="lnt"> 92
&lt;/span>&lt;span class="lnt"> 93
&lt;/span>&lt;span class="lnt"> 94
&lt;/span>&lt;span class="lnt"> 95
&lt;/span>&lt;span class="lnt"> 96
&lt;/span>&lt;span class="lnt"> 97
&lt;/span>&lt;span class="lnt"> 98
&lt;/span>&lt;span class="lnt"> 99
&lt;/span>&lt;span class="lnt">100
&lt;/span>&lt;span class="lnt">101
&lt;/span>&lt;span class="lnt">102
&lt;/span>&lt;span class="lnt">103
&lt;/span>&lt;span class="lnt">104
&lt;/span>&lt;span class="lnt">105
&lt;/span>&lt;span class="lnt">106
&lt;/span>&lt;span class="lnt">107
&lt;/span>&lt;span class="lnt">108
&lt;/span>&lt;span class="lnt">109
&lt;/span>&lt;span class="lnt">110
&lt;/span>&lt;span class="lnt">111
&lt;/span>&lt;span class="lnt">112
&lt;/span>&lt;span class="lnt">113
&lt;/span>&lt;span class="lnt">114
&lt;/span>&lt;span class="lnt">115
&lt;/span>&lt;span class="lnt">116
&lt;/span>&lt;span class="lnt">117
&lt;/span>&lt;span class="lnt">118
&lt;/span>&lt;span class="lnt">119
&lt;/span>&lt;span class="lnt">120
&lt;/span>&lt;span class="lnt">121
&lt;/span>&lt;span class="lnt">122
&lt;/span>&lt;span class="lnt">123
&lt;/span>&lt;span class="lnt">124
&lt;/span>&lt;span class="lnt">125
&lt;/span>&lt;span class="lnt">126
&lt;/span>&lt;span class="lnt">127
&lt;/span>&lt;span class="lnt">128
&lt;/span>&lt;span class="lnt">129
&lt;/span>&lt;span class="lnt">130
&lt;/span>&lt;span class="lnt">131
&lt;/span>&lt;span class="lnt">132
&lt;/span>&lt;span class="lnt">133
&lt;/span>&lt;span class="lnt">134
&lt;/span>&lt;span class="lnt">135
&lt;/span>&lt;span class="lnt">136
&lt;/span>&lt;span class="lnt">137
&lt;/span>&lt;span class="lnt">138
&lt;/span>&lt;span class="lnt">139
&lt;/span>&lt;span class="lnt">140
&lt;/span>&lt;span class="lnt">141
&lt;/span>&lt;span class="lnt">142
&lt;/span>&lt;span class="lnt">143
&lt;/span>&lt;span class="lnt">144
&lt;/span>&lt;span class="lnt">145
&lt;/span>&lt;span class="lnt">146
&lt;/span>&lt;span class="lnt">147
&lt;/span>&lt;span class="lnt">148
&lt;/span>&lt;span class="lnt">149
&lt;/span>&lt;span class="lnt">150
&lt;/span>&lt;span class="lnt">151
&lt;/span>&lt;span class="lnt">152
&lt;/span>&lt;span class="lnt">153
&lt;/span>&lt;span class="lnt">154
&lt;/span>&lt;span class="lnt">155
&lt;/span>&lt;span class="lnt">156
&lt;/span>&lt;span class="lnt">157
&lt;/span>&lt;span class="lnt">158
&lt;/span>&lt;span class="lnt">159
&lt;/span>&lt;span class="lnt">160
&lt;/span>&lt;span class="lnt">161
&lt;/span>&lt;span class="lnt">162
&lt;/span>&lt;span class="lnt">163
&lt;/span>&lt;span class="lnt">164
&lt;/span>&lt;span class="lnt">165
&lt;/span>&lt;span class="lnt">166
&lt;/span>&lt;span class="lnt">167
&lt;/span>&lt;span class="lnt">168
&lt;/span>&lt;span class="lnt">169
&lt;/span>&lt;span class="lnt">170
&lt;/span>&lt;span class="lnt">171
&lt;/span>&lt;span class="lnt">172
&lt;/span>&lt;span class="lnt">173
&lt;/span>&lt;span class="lnt">174
&lt;/span>&lt;span class="lnt">175
&lt;/span>&lt;span class="lnt">176
&lt;/span>&lt;span class="lnt">177
&lt;/span>&lt;span class="lnt">178
&lt;/span>&lt;span class="lnt">179
&lt;/span>&lt;span class="lnt">180
&lt;/span>&lt;span class="lnt">181
&lt;/span>&lt;span class="lnt">182
&lt;/span>&lt;span class="lnt">183
&lt;/span>&lt;span class="lnt">184
&lt;/span>&lt;span class="lnt">185
&lt;/span>&lt;span class="lnt">186
&lt;/span>&lt;span class="lnt">187
&lt;/span>&lt;span class="lnt">188
&lt;/span>&lt;span class="lnt">189
&lt;/span>&lt;span class="lnt">190
&lt;/span>&lt;span class="lnt">191
&lt;/span>&lt;span class="lnt">192
&lt;/span>&lt;span class="lnt">193
&lt;/span>&lt;span class="lnt">194
&lt;/span>&lt;span class="lnt">195
&lt;/span>&lt;span class="lnt">196
&lt;/span>&lt;span class="lnt">197
&lt;/span>&lt;span class="lnt">198
&lt;/span>&lt;span class="lnt">199
&lt;/span>&lt;span class="lnt">200
&lt;/span>&lt;span class="lnt">201
&lt;/span>&lt;span class="lnt">202
&lt;/span>&lt;span class="lnt">203
&lt;/span>&lt;span class="lnt">204
&lt;/span>&lt;span class="lnt">205
&lt;/span>&lt;span class="lnt">206
&lt;/span>&lt;span class="lnt">207
&lt;/span>&lt;span class="lnt">208
&lt;/span>&lt;span class="lnt">209
&lt;/span>&lt;span class="lnt">210
&lt;/span>&lt;span class="lnt">211
&lt;/span>&lt;span class="lnt">212
&lt;/span>&lt;span class="lnt">213
&lt;/span>&lt;span class="lnt">214
&lt;/span>&lt;span class="lnt">215
&lt;/span>&lt;span class="lnt">216
&lt;/span>&lt;span class="lnt">217
&lt;/span>&lt;span class="lnt">218
&lt;/span>&lt;span class="lnt">219
&lt;/span>&lt;span class="lnt">220
&lt;/span>&lt;span class="lnt">221
&lt;/span>&lt;span class="lnt">222
&lt;/span>&lt;span class="lnt">223
&lt;/span>&lt;span class="lnt">224
&lt;/span>&lt;span class="lnt">225
&lt;/span>&lt;span class="lnt">226
&lt;/span>&lt;span class="lnt">227
&lt;/span>&lt;span class="lnt">228
&lt;/span>&lt;span class="lnt">229
&lt;/span>&lt;span class="lnt">230
&lt;/span>&lt;span class="lnt">231
&lt;/span>&lt;span class="lnt">232
&lt;/span>&lt;span class="lnt">233
&lt;/span>&lt;span class="lnt">234
&lt;/span>&lt;span class="lnt">235
&lt;/span>&lt;span class="lnt">236
&lt;/span>&lt;span class="lnt">237
&lt;/span>&lt;span class="lnt">238
&lt;/span>&lt;span class="lnt">239
&lt;/span>&lt;span class="lnt">240
&lt;/span>&lt;span class="lnt">241
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">import abc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">import struct
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">from numpy import longlong
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">class ByteBuf(Buf):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def __init__(self, buf: bytearray = None) -&amp;gt; None:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if buf is None:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf = bytearray()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.write_index = 0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> else:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf = buf
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.write_index = len(buf)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.read_index = 0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def check_readable_bytes_len(self, length: int):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if self.readable_bytes_len() &amp;lt; length:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> raise Exception(&amp;#34;readable bytes length must greater than or equal %d&amp;#34; % length)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def readable_bytes_len(self) -&amp;gt; int:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return self.write_index - self.read_index
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def to_bytes(self) -&amp;gt; bytearray:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return self.buf
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def write_i8(self, value: int):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf += struct.pack(Buf.SIGNED_CHAR, value)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.write_index += 1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def write_u8(self, value: int):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf += struct.pack(Buf.UNSIGNED_CHAR, value)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.write_index += 1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def write_bool(self, value: bool):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf += struct.pack(Buf.BOOLEAN, value)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.write_index += 1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def write_i16(self, value: int):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf += struct.pack(Buf.ByteOrder.BIG_ENDIAN + Buf.SHORT, value)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.write_index += 2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def write_i16_le(self, value: int):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf += struct.pack(Buf.ByteOrder.LITTLE_ENDIAN + Buf.SHORT, value)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.write_index += 2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def write_u16(self, value: int):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf += struct.pack(Buf.ByteOrder.BIG_ENDIAN + Buf.UNSIGNED_SHORT, value)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.write_index += 2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def write_u16_le(self, value: int):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf += struct.pack(Buf.ByteOrder.LITTLE_ENDIAN + Buf.UNSIGNED_SHORT, value)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.write_index += 2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def write_i32(self, value: int):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf += struct.pack(Buf.ByteOrder.BIG_ENDIAN + Buf.INT, value)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.write_index += 4
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def write_i32_le(self, value: int):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf += struct.pack(Buf.ByteOrder.LITTLE_ENDIAN + Buf.INT, value)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.write_index += 4
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def write_u32(self, value: int):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf += struct.pack(Buf.ByteOrder.BIG_ENDIAN + Buf.UNSIGNED_INT, value)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.write_index += 4
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def write_u32_le(self, value: int):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf += struct.pack(Buf.ByteOrder.LITTLE_ENDIAN + Buf.UNSIGNED_INT, value)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.write_index += 4
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def write_i64(self, value: longlong):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf += struct.pack(Buf.ByteOrder.BIG_ENDIAN + Buf.LONG_LONG, value)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.write_index += 8
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def write_i64_le(self, value: longlong):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf += struct.pack(Buf.ByteOrder.LITTLE_ENDIAN + Buf.LONG_LONG, value)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.write_index += 8
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def write_u64(self, value: longlong):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf += struct.pack(Buf.ByteOrder.BIG_ENDIAN + Buf.UNSIGNED_LONG_LONG, value)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.write_index += 8
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def write_u64_le(self, value: longlong):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf += struct.pack(Buf.ByteOrder.LITTLE_ENDIAN + Buf.UNSIGNED_LONG_LONG, value)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.write_index += 8
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def write_f32(self, value: float):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf += struct.pack(Buf.ByteOrder.BIG_ENDIAN + Buf.FLOAT, value)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.write_index += 4
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def write_f32_le(self, value: float):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf += struct.pack(Buf.ByteOrder.LITTLE_ENDIAN + Buf.FLOAT, value)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.write_index += 4
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def write_f64(self, value: float):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf += struct.pack(Buf.ByteOrder.BIG_ENDIAN + Buf.DOUBLE, value)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.write_index += 8
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def write_f64_le(self, value: float):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf += struct.pack(Buf.ByteOrder.LITTLE_ENDIAN + Buf.DOUBLE, value)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.write_index += 8
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def write_bytes(self, value: bytes):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if len(value) &amp;gt; 0:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf += value
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.write_index += len(value)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def read_i8(self) -&amp;gt; int:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.check_readable_bytes_len(1)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ret = struct.unpack(Buf.SIGNED_CHAR, self.buf[self.read_index:self.read_index + 1])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.read_index += 1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return ret[0]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def read_u8(self):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.check_readable_bytes_len(1)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ret = struct.unpack(Buf.UNSIGNED_CHAR, self.buf[self.read_index:self.read_index + 1])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.read_index += 1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return ret[0]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def read_bool(self):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.check_readable_bytes_len(1)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ret = struct.unpack(Buf.BOOLEAN, self.buf[self.read_index:self.read_index + 1])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.read_index += 1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return ret[0]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def read_i16(self):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.check_readable_bytes_len(2)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ret = struct.unpack(Buf.ByteOrder.BIG_ENDIAN + Buf.SHORT, self.buf[self.read_index:self.read_index + 2])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.read_index += 2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return ret[0]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def read_i16_le(self):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.check_readable_bytes_len(2)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ret = struct.unpack(Buf.ByteOrder.LITTLE_ENDIAN + Buf.SHORT, self.buf[self.read_index:self.read_index + 2])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.read_index += 2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return ret[0]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def read_u16(self):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.check_readable_bytes_len(2)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ret = struct.unpack(Buf.ByteOrder.BIG_ENDIAN + Buf.UNSIGNED_SHORT,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf[self.read_index:self.read_index + 2])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.read_index += 2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return ret[0]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def read_u16_le(self):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.check_readable_bytes_len(2)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ret = struct.unpack(Buf.ByteOrder.LITTLE_ENDIAN + Buf.UNSIGNED_SHORT,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf[self.read_index:self.read_index + 2])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.read_index += 2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return ret[0]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def read_i32(self):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ret = struct.unpack(Buf.ByteOrder.BIG_ENDIAN + Buf.INT,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf[self.read_index:self.read_index + 4])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.read_index += 4
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return ret[0]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def read_i32_le(self):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.check_readable_bytes_len(4)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ret = struct.unpack(Buf.ByteOrder.LITTLE_ENDIAN + Buf.INT,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf[self.read_index:self.read_index + 4])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.read_index += 4
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return ret[0]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def read_u32(self):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.check_readable_bytes_len(4)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ret = struct.unpack(Buf.ByteOrder.BIG_ENDIAN + Buf.UNSIGNED_INT,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf[self.read_index:self.read_index + 4])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.read_index += 4
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return ret[0]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def read_u32_le(self):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.check_readable_bytes_len(4)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ret = struct.unpack(Buf.ByteOrder.LITTLE_ENDIAN + Buf.UNSIGNED_INT,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf[self.read_index:self.read_index + 4])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.read_index += 4
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return ret[0]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def read_i64(self):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.check_readable_bytes_len(8)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ret = struct.unpack(Buf.ByteOrder.BIG_ENDIAN + Buf.LONG_LONG,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf[self.read_index:self.read_index + 8])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.read_index += 8
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return ret[0]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def read_i64_le(self):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.check_readable_bytes_len(8)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ret = struct.unpack(Buf.ByteOrder.LITTLE_ENDIAN + Buf.LONG_LONG,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf[self.read_index:self.read_index + 8])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.read_index += 8
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return ret[0]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def read_u64(self):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.check_readable_bytes_len(8)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ret = struct.unpack(Buf.ByteOrder.BIG_ENDIAN + Buf.UNSIGNED_LONG_LONG,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf[self.read_index:self.read_index + 8])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.read_index += 8
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return ret[0]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def read_u64_le(self):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.check_readable_bytes_len(8)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ret = struct.unpack(Buf.ByteOrder.LITTLE_ENDIAN + Buf.UNSIGNED_LONG_LONG,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf[self.read_index:self.read_index + 8])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.read_index += 8
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return ret[0]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def read_f32(self):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.check_readable_bytes_len(4)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ret = struct.unpack(Buf.ByteOrder.BIG_ENDIAN + Buf.FLOAT,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf[self.read_index:self.read_index + 4])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.read_index += 4
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return ret[0]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def read_f32_le(self):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.check_readable_bytes_len(4)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ret = struct.unpack(Buf.ByteOrder.LITTLE_ENDIAN + Buf.FLOAT,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf[self.read_index:self.read_index + 4])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.read_index += 4
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return ret[0]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def read_f64(self):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.check_readable_bytes_len(8)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ret = struct.unpack(Buf.ByteOrder.BIG_ENDIAN + Buf.DOUBLE,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf[self.read_index:self.read_index + 8])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.read_index += 8
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return ret[0]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def read_f64_le(self):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.check_readable_bytes_len(8)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ret = struct.unpack(Buf.ByteOrder.LITTLE_ENDIAN + Buf.DOUBLE,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf[self.read_index:self.read_index + 8])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.read_index += 8
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return ret[0]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def read_bytes(self, length: int) -&amp;gt; bytearray:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.check_readable_bytes_len(length)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ret = self.buf[self.read_index:self.read_index + length]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.read_index += length
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return ret
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="三编写单元测试">&lt;strong>三、编写单元测试&lt;/strong>
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt"> 10
&lt;/span>&lt;span class="lnt"> 11
&lt;/span>&lt;span class="lnt"> 12
&lt;/span>&lt;span class="lnt"> 13
&lt;/span>&lt;span class="lnt"> 14
&lt;/span>&lt;span class="lnt"> 15
&lt;/span>&lt;span class="lnt"> 16
&lt;/span>&lt;span class="lnt"> 17
&lt;/span>&lt;span class="lnt"> 18
&lt;/span>&lt;span class="lnt"> 19
&lt;/span>&lt;span class="lnt"> 20
&lt;/span>&lt;span class="lnt"> 21
&lt;/span>&lt;span class="lnt"> 22
&lt;/span>&lt;span class="lnt"> 23
&lt;/span>&lt;span class="lnt"> 24
&lt;/span>&lt;span class="lnt"> 25
&lt;/span>&lt;span class="lnt"> 26
&lt;/span>&lt;span class="lnt"> 27
&lt;/span>&lt;span class="lnt"> 28
&lt;/span>&lt;span class="lnt"> 29
&lt;/span>&lt;span class="lnt"> 30
&lt;/span>&lt;span class="lnt"> 31
&lt;/span>&lt;span class="lnt"> 32
&lt;/span>&lt;span class="lnt"> 33
&lt;/span>&lt;span class="lnt"> 34
&lt;/span>&lt;span class="lnt"> 35
&lt;/span>&lt;span class="lnt"> 36
&lt;/span>&lt;span class="lnt"> 37
&lt;/span>&lt;span class="lnt"> 38
&lt;/span>&lt;span class="lnt"> 39
&lt;/span>&lt;span class="lnt"> 40
&lt;/span>&lt;span class="lnt"> 41
&lt;/span>&lt;span class="lnt"> 42
&lt;/span>&lt;span class="lnt"> 43
&lt;/span>&lt;span class="lnt"> 44
&lt;/span>&lt;span class="lnt"> 45
&lt;/span>&lt;span class="lnt"> 46
&lt;/span>&lt;span class="lnt"> 47
&lt;/span>&lt;span class="lnt"> 48
&lt;/span>&lt;span class="lnt"> 49
&lt;/span>&lt;span class="lnt"> 50
&lt;/span>&lt;span class="lnt"> 51
&lt;/span>&lt;span class="lnt"> 52
&lt;/span>&lt;span class="lnt"> 53
&lt;/span>&lt;span class="lnt"> 54
&lt;/span>&lt;span class="lnt"> 55
&lt;/span>&lt;span class="lnt"> 56
&lt;/span>&lt;span class="lnt"> 57
&lt;/span>&lt;span class="lnt"> 58
&lt;/span>&lt;span class="lnt"> 59
&lt;/span>&lt;span class="lnt"> 60
&lt;/span>&lt;span class="lnt"> 61
&lt;/span>&lt;span class="lnt"> 62
&lt;/span>&lt;span class="lnt"> 63
&lt;/span>&lt;span class="lnt"> 64
&lt;/span>&lt;span class="lnt"> 65
&lt;/span>&lt;span class="lnt"> 66
&lt;/span>&lt;span class="lnt"> 67
&lt;/span>&lt;span class="lnt"> 68
&lt;/span>&lt;span class="lnt"> 69
&lt;/span>&lt;span class="lnt"> 70
&lt;/span>&lt;span class="lnt"> 71
&lt;/span>&lt;span class="lnt"> 72
&lt;/span>&lt;span class="lnt"> 73
&lt;/span>&lt;span class="lnt"> 74
&lt;/span>&lt;span class="lnt"> 75
&lt;/span>&lt;span class="lnt"> 76
&lt;/span>&lt;span class="lnt"> 77
&lt;/span>&lt;span class="lnt"> 78
&lt;/span>&lt;span class="lnt"> 79
&lt;/span>&lt;span class="lnt"> 80
&lt;/span>&lt;span class="lnt"> 81
&lt;/span>&lt;span class="lnt"> 82
&lt;/span>&lt;span class="lnt"> 83
&lt;/span>&lt;span class="lnt"> 84
&lt;/span>&lt;span class="lnt"> 85
&lt;/span>&lt;span class="lnt"> 86
&lt;/span>&lt;span class="lnt"> 87
&lt;/span>&lt;span class="lnt"> 88
&lt;/span>&lt;span class="lnt"> 89
&lt;/span>&lt;span class="lnt"> 90
&lt;/span>&lt;span class="lnt"> 91
&lt;/span>&lt;span class="lnt"> 92
&lt;/span>&lt;span class="lnt"> 93
&lt;/span>&lt;span class="lnt"> 94
&lt;/span>&lt;span class="lnt"> 95
&lt;/span>&lt;span class="lnt"> 96
&lt;/span>&lt;span class="lnt"> 97
&lt;/span>&lt;span class="lnt"> 98
&lt;/span>&lt;span class="lnt"> 99
&lt;/span>&lt;span class="lnt">100
&lt;/span>&lt;span class="lnt">101
&lt;/span>&lt;span class="lnt">102
&lt;/span>&lt;span class="lnt">103
&lt;/span>&lt;span class="lnt">104
&lt;/span>&lt;span class="lnt">105
&lt;/span>&lt;span class="lnt">106
&lt;/span>&lt;span class="lnt">107
&lt;/span>&lt;span class="lnt">108
&lt;/span>&lt;span class="lnt">109
&lt;/span>&lt;span class="lnt">110
&lt;/span>&lt;span class="lnt">111
&lt;/span>&lt;span class="lnt">112
&lt;/span>&lt;span class="lnt">113
&lt;/span>&lt;span class="lnt">114
&lt;/span>&lt;span class="lnt">115
&lt;/span>&lt;span class="lnt">116
&lt;/span>&lt;span class="lnt">117
&lt;/span>&lt;span class="lnt">118
&lt;/span>&lt;span class="lnt">119
&lt;/span>&lt;span class="lnt">120
&lt;/span>&lt;span class="lnt">121
&lt;/span>&lt;span class="lnt">122
&lt;/span>&lt;span class="lnt">123
&lt;/span>&lt;span class="lnt">124
&lt;/span>&lt;span class="lnt">125
&lt;/span>&lt;span class="lnt">126
&lt;/span>&lt;span class="lnt">127
&lt;/span>&lt;span class="lnt">128
&lt;/span>&lt;span class="lnt">129
&lt;/span>&lt;span class="lnt">130
&lt;/span>&lt;span class="lnt">131
&lt;/span>&lt;span class="lnt">132
&lt;/span>&lt;span class="lnt">133
&lt;/span>&lt;span class="lnt">134
&lt;/span>&lt;span class="lnt">135
&lt;/span>&lt;span class="lnt">136
&lt;/span>&lt;span class="lnt">137
&lt;/span>&lt;span class="lnt">138
&lt;/span>&lt;span class="lnt">139
&lt;/span>&lt;span class="lnt">140
&lt;/span>&lt;span class="lnt">141
&lt;/span>&lt;span class="lnt">142
&lt;/span>&lt;span class="lnt">143
&lt;/span>&lt;span class="lnt">144
&lt;/span>&lt;span class="lnt">145
&lt;/span>&lt;span class="lnt">146
&lt;/span>&lt;span class="lnt">147
&lt;/span>&lt;span class="lnt">148
&lt;/span>&lt;span class="lnt">149
&lt;/span>&lt;span class="lnt">150
&lt;/span>&lt;span class="lnt">151
&lt;/span>&lt;span class="lnt">152
&lt;/span>&lt;span class="lnt">153
&lt;/span>&lt;span class="lnt">154
&lt;/span>&lt;span class="lnt">155
&lt;/span>&lt;span class="lnt">156
&lt;/span>&lt;span class="lnt">157
&lt;/span>&lt;span class="lnt">158
&lt;/span>&lt;span class="lnt">159
&lt;/span>&lt;span class="lnt">160
&lt;/span>&lt;span class="lnt">161
&lt;/span>&lt;span class="lnt">162
&lt;/span>&lt;span class="lnt">163
&lt;/span>&lt;span class="lnt">164
&lt;/span>&lt;span class="lnt">165
&lt;/span>&lt;span class="lnt">166
&lt;/span>&lt;span class="lnt">167
&lt;/span>&lt;span class="lnt">168
&lt;/span>&lt;span class="lnt">169
&lt;/span>&lt;span class="lnt">170
&lt;/span>&lt;span class="lnt">171
&lt;/span>&lt;span class="lnt">172
&lt;/span>&lt;span class="lnt">173
&lt;/span>&lt;span class="lnt">174
&lt;/span>&lt;span class="lnt">175
&lt;/span>&lt;span class="lnt">176
&lt;/span>&lt;span class="lnt">177
&lt;/span>&lt;span class="lnt">178
&lt;/span>&lt;span class="lnt">179
&lt;/span>&lt;span class="lnt">180
&lt;/span>&lt;span class="lnt">181
&lt;/span>&lt;span class="lnt">182
&lt;/span>&lt;span class="lnt">183
&lt;/span>&lt;span class="lnt">184
&lt;/span>&lt;span class="lnt">185
&lt;/span>&lt;span class="lnt">186
&lt;/span>&lt;span class="lnt">187
&lt;/span>&lt;span class="lnt">188
&lt;/span>&lt;span class="lnt">189
&lt;/span>&lt;span class="lnt">190
&lt;/span>&lt;span class="lnt">191
&lt;/span>&lt;span class="lnt">192
&lt;/span>&lt;span class="lnt">193
&lt;/span>&lt;span class="lnt">194
&lt;/span>&lt;span class="lnt">195
&lt;/span>&lt;span class="lnt">196
&lt;/span>&lt;span class="lnt">197
&lt;/span>&lt;span class="lnt">198
&lt;/span>&lt;span class="lnt">199
&lt;/span>&lt;span class="lnt">200
&lt;/span>&lt;span class="lnt">201
&lt;/span>&lt;span class="lnt">202
&lt;/span>&lt;span class="lnt">203
&lt;/span>&lt;span class="lnt">204
&lt;/span>&lt;span class="lnt">205
&lt;/span>&lt;span class="lnt">206
&lt;/span>&lt;span class="lnt">207
&lt;/span>&lt;span class="lnt">208
&lt;/span>&lt;span class="lnt">209
&lt;/span>&lt;span class="lnt">210
&lt;/span>&lt;span class="lnt">211
&lt;/span>&lt;span class="lnt">212
&lt;/span>&lt;span class="lnt">213
&lt;/span>&lt;span class="lnt">214
&lt;/span>&lt;span class="lnt">215
&lt;/span>&lt;span class="lnt">216
&lt;/span>&lt;span class="lnt">217
&lt;/span>&lt;span class="lnt">218
&lt;/span>&lt;span class="lnt">219
&lt;/span>&lt;span class="lnt">220
&lt;/span>&lt;span class="lnt">221
&lt;/span>&lt;span class="lnt">222
&lt;/span>&lt;span class="lnt">223
&lt;/span>&lt;span class="lnt">224
&lt;/span>&lt;span class="lnt">225
&lt;/span>&lt;span class="lnt">226
&lt;/span>&lt;span class="lnt">227
&lt;/span>&lt;span class="lnt">228
&lt;/span>&lt;span class="lnt">229
&lt;/span>&lt;span class="lnt">230
&lt;/span>&lt;span class="lnt">231
&lt;/span>&lt;span class="lnt">232
&lt;/span>&lt;span class="lnt">233
&lt;/span>&lt;span class="lnt">234
&lt;/span>&lt;span class="lnt">235
&lt;/span>&lt;span class="lnt">236
&lt;/span>&lt;span class="lnt">237
&lt;/span>&lt;span class="lnt">238
&lt;/span>&lt;span class="lnt">239
&lt;/span>&lt;span class="lnt">240
&lt;/span>&lt;span class="lnt">241
&lt;/span>&lt;span class="lnt">242
&lt;/span>&lt;span class="lnt">243
&lt;/span>&lt;span class="lnt">244
&lt;/span>&lt;span class="lnt">245
&lt;/span>&lt;span class="lnt">246
&lt;/span>&lt;span class="lnt">247
&lt;/span>&lt;span class="lnt">248
&lt;/span>&lt;span class="lnt">249
&lt;/span>&lt;span class="lnt">250
&lt;/span>&lt;span class="lnt">251
&lt;/span>&lt;span class="lnt">252
&lt;/span>&lt;span class="lnt">253
&lt;/span>&lt;span class="lnt">254
&lt;/span>&lt;span class="lnt">255
&lt;/span>&lt;span class="lnt">256
&lt;/span>&lt;span class="lnt">257
&lt;/span>&lt;span class="lnt">258
&lt;/span>&lt;span class="lnt">259
&lt;/span>&lt;span class="lnt">260
&lt;/span>&lt;span class="lnt">261
&lt;/span>&lt;span class="lnt">262
&lt;/span>&lt;span class="lnt">263
&lt;/span>&lt;span class="lnt">264
&lt;/span>&lt;span class="lnt">265
&lt;/span>&lt;span class="lnt">266
&lt;/span>&lt;span class="lnt">267
&lt;/span>&lt;span class="lnt">268
&lt;/span>&lt;span class="lnt">269
&lt;/span>&lt;span class="lnt">270
&lt;/span>&lt;span class="lnt">271
&lt;/span>&lt;span class="lnt">272
&lt;/span>&lt;span class="lnt">273
&lt;/span>&lt;span class="lnt">274
&lt;/span>&lt;span class="lnt">275
&lt;/span>&lt;span class="lnt">276
&lt;/span>&lt;span class="lnt">277
&lt;/span>&lt;span class="lnt">278
&lt;/span>&lt;span class="lnt">279
&lt;/span>&lt;span class="lnt">280
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">import os, sys
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sys.path.append(os.getcwd())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">from unittest import TestCase
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">import pytest
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">from buf.byte_buf import ByteBuf
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">class TestByteBuf(TestCase):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def setUp(self) -&amp;gt; None:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf = ByteBuf()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def test_byte_buf(self) -&amp;gt; int:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_i8(127)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_i8(127)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_i8(1)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_f32(1)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> buf1 = ByteBuf(self.buf.to_bytes())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertEqual(7, buf1.readable_bytes_len())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def test_readable_bytes_len(self) -&amp;gt; int:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_i8(127)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_i8(127)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_i8(1)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_f32(1)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertEqual(7, self.buf.readable_bytes_len())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def test_to_bytes(self) -&amp;gt; bytes:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_i8(127)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_i8(127)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_i8(1)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertEqual(b&amp;#39;\x7f\x7f\x01&amp;#39;, self.buf.to_bytes())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def test_write_i8(self):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_i8(-128)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_i8(0)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_i8(127)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertEqual(-128, self.buf.read_i8())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertEqual(0, self.buf.read_i8())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertEqual(127, self.buf.read_i8())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def test_write_i8_failed1(self):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> with pytest.raises(Exception):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_i8(128)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def test_write_i8_failed2(self):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> with pytest.raises(Exception):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_i8(-129)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def test_write_i8_failed3(self):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> with pytest.raises(Exception):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.read_i8()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def test_write_u8(self):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_u8(0)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_u8(127)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_u8(255)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertEqual(0, self.buf.read_u8())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertEqual(127, self.buf.read_u8())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertEqual(255, self.buf.read_u8())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def test_write_u8_failed1(self):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> with pytest.raises(Exception):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_u8(-1)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def test_write_u8_failed2(self):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> with pytest.raises(Exception):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_u8(256)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def test_write_bool(self):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_bool(True)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_bool(False)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_bool(1)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_bool(0)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_bool(22222)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertTrue(self.buf.read_bool())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertFalse(self.buf.read_bool())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertTrue(self.buf.read_bool())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertFalse(self.buf.read_bool())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertTrue(self.buf.read_bool())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def test_write_i16(self):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_i16(-32768)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_i16(0)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_i16(127)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_i16(32767)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertEqual(-32768, self.buf.read_i16())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertEqual(0, self.buf.read_i16())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertEqual(127, self.buf.read_i16())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertEqual(32767, self.buf.read_i16())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def test_write_i16_failed1(self):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> with pytest.raises(Exception):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_i16(-32769)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def test_write_i16_failed2(self):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> with pytest.raises(Exception):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_i16(32768)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def test_write_i16_le(self):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_i16_le(-32768)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_i16_le(0)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_i16_le(127)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_i16_le(32767)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_i16_le(32767)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertEqual(-32768, self.buf.read_i16_le())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertEqual(0, self.buf.read_i16_le())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertEqual(127, self.buf.read_i16_le())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertEqual(32767, self.buf.read_i16_le())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertNotEqual(32767, self.buf.read_i16())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def test_write_u16(self):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_u16(0)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_u16(127)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_u16(65535)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertEqual(0, self.buf.read_u16())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertEqual(127, self.buf.read_u16())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertEqual(65535, self.buf.read_u16())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def test_write_u16_failed1(self):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> with pytest.raises(Exception):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_u16(-1)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def test_write_u16_failed2(self):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> with pytest.raises(Exception):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_u16(65536)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def test_write_u16_le(self):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_u16_le(0)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_u16_le(127)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_u16_le(65535)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_u16_le(65534)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertEqual(0, self.buf.read_u16_le())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertEqual(127, self.buf.read_u16_le())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertEqual(65535, self.buf.read_u16_le())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertNotEqual(65534, self.buf.read_u16())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def test_write_i32(self):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_i32(-2 ** 31)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_i32(0)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_i32(127)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_i32(127)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_i32(2 ** 31 - 1)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertEqual(-2 ** 31, self.buf.read_i32())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertEqual(0, self.buf.read_i32())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertEqual(127, self.buf.read_i32())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertNotEqual(127, self.buf.read_i32_le())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertEqual(2 ** 31 - 1, self.buf.read_i32())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def test_write_i32_le(self):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_i32_le(-2 ** 31)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_i32_le(0)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_i32_le(127)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_i32_le(127)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_i32_le(2 ** 31 - 1)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertEqual(-2 ** 31, self.buf.read_i32_le())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertEqual(0, self.buf.read_i32_le())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertEqual(127, self.buf.read_i32_le())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertNotEqual(127, self.buf.read_i32())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertEqual(2 ** 31 - 1, self.buf.read_i32_le())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def test_write_u32(self):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_u32(0)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_u32(127)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_u32(127)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_u32(2 ** 32 - 1)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertEqual(0, self.buf.read_u32())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertEqual(127, self.buf.read_u32())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertNotEqual(127, self.buf.read_u32_le())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertEqual(2 ** 32 - 1, self.buf.read_u32())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def test_write_u32_failed1(self):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> with pytest.raises(Exception):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_u32(-1)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def test_write_u32_failed2(self):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> with pytest.raises(Exception):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_u32(2 ** 32)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def test_write_u32_le(self):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_u32_le(0)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_u32_le(127)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_u32_le(127)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_u32_le(2 ** 32 - 1)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertEqual(0, self.buf.read_u32_le())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertEqual(127, self.buf.read_u32_le())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertNotEqual(127, self.buf.read_u32())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertEqual(2 ** 32 - 1, self.buf.read_u32_le())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def test_write_i64(self):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_i64(- 2 ** 63)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_i64(0)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_i64(127)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_i64(127)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_i64(2 ** 63 - 1)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertEqual(-2 ** 63, self.buf.read_i64())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertEqual(0, self.buf.read_i64())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertEqual(127, self.buf.read_i64())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertNotEqual(127, self.buf.read_i64_le())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertEqual(2 ** 63 - 1, self.buf.read_i64())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def test_write_i64_le(self):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_i64_le(- 2 ** 63)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_i64_le(0)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_i64_le(127)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_i64_le(127)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_i64_le(2 ** 63 - 1)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertEqual(-2 ** 63, self.buf.read_i64_le())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertEqual(0, self.buf.read_i64_le())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertEqual(127, self.buf.read_i64_le())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertNotEqual(127, self.buf.read_i64())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertEqual(2 ** 63 - 1, self.buf.read_i64_le())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def test_write_u64(self):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_i64_le(- 2 ** 63)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_i64_le(0)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_i64_le(127)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_i64_le(127)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_i64_le(2 ** 63 - 1)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertEqual(-2 ** 63, self.buf.read_i64_le())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertEqual(0, self.buf.read_i64_le())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertEqual(127, self.buf.read_i64_le())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertNotEqual(127, self.buf.read_i64())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertEqual(2 ** 63 - 1, self.buf.read_i64_le())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def test_write_u64_le(self):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_u64_le(0)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_u64_le(127)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_u64_le(127)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_u64_le(2 ** 64 - 1)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertEqual(0, self.buf.read_u64_le())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertEqual(127, self.buf.read_u64_le())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertNotEqual(127, self.buf.read_u64())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertEqual(2 ** 64 - 1, self.buf.read_u64_le())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def test_write_f32(self):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_f32(0)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_f32(127)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_f32(127)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_f32(12.0)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertEqual(0, self.buf.read_f32())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertEqual(127, self.buf.read_f32())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertNotEqual(127, self.buf.read_f32_le())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertEqual(12.0, self.buf.read_f32())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def test_write_f32_le(self):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_f32_le(0)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_f32_le(127)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_f32_le(127)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_f32_le(12.0)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertEqual(0, self.buf.read_f32_le())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertEqual(127, self.buf.read_f32_le())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertNotEqual(127, self.buf.read_f32())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertEqual(12.0, self.buf.read_f32_le())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def test_write_f64(self):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_f64(0)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_f64(127)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_f64(127)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_f64(12.0)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertEqual(0, self.buf.read_f64())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertEqual(127, self.buf.read_f64())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertNotEqual(127, self.buf.read_f64_le())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertEqual(12.0, self.buf.read_f64())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def test_write_f64_le(self):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_f64_le(0)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_f64_le(127)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_f64_le(127)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_f64_le(12.0)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertEqual(0, self.buf.read_f64_le())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertEqual(127, self.buf.read_f64_le())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertNotEqual(127, self.buf.read_f64())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertEqual(12.0, self.buf.read_f64_le())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def test_write_bytes(self):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.buf.write_bytes(b&amp;#39;hello&amp;#39;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertEqual(b&amp;#39;hel&amp;#39;, self.buf.read_bytes(3))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.assertEqual(b&amp;#39;lo&amp;#39;, self.buf.read_bytes(2))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>执行单元测试&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">buf\test_byte_buf.py .................................. [100%]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">============================================================================================= 34 passed in 0.60s ==============================================================================================
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="四总结">&lt;strong>四、总结&lt;/strong>：
&lt;/h3>&lt;p>该ByteBuf不考虑线程安全，仅提供了顺序读写的能力，未来在实际使用过程中根据实际完善，比如随机读写能力，基于多个ByteBuf进行Wrapper组合构建新的ByteBuf等。&lt;/p>
&lt;p>参考文档：&lt;br>
&lt;a class="link" href="https://netty.io/4.0/api/io/netty/buffer/ByteBuf.html" target="_blank" rel="noopener"
>https://netty.io/4.0/api/io/netty/buffer/ByteBuf.html&lt;/a>
&lt;a class="link" href="https://docs.oracle.com/javase/8/docs/api/java/nio/ByteBuffer.html" target="_blank" rel="noopener"
>https://docs.oracle.com/javase/8/docs/api/java/nio/ByteBuffer.html&lt;/a>
&lt;a class="link" href="https://docs.rs/bytes/1.1.0/bytes/" target="_blank" rel="noopener"
>https://docs.rs/bytes/1.1.0/bytes/&lt;/a>&lt;/p>
&lt;p>&lt;em>作者：xinchen&lt;/em>
&lt;em>首次发布日期：2025-05-25&lt;/em>
&lt;em>版权所有 © 2025&lt;/em>
&lt;em>作者信息：af83f787e8911dea9b3bf677746ebac9&lt;/em>&lt;/p>
&lt;h3 id="下期预告基于bytebuf实现对交易所交易接口消息的封装">&lt;em>下期预告&lt;/em>：基于Bytebuf实现对交易所交易接口消息的封装
&lt;/h3></description></item><item><title>Java 字符串拼接性能实测：基于 JMH 的微基准测试</title><link>https://xinchentechnote.github.io/note/p/java-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8B%BC%E6%8E%A5%E6%80%A7%E8%83%BD%E5%AE%9E%E6%B5%8B%E5%9F%BA%E4%BA%8E-jmh-%E7%9A%84%E5%BE%AE%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95/</link><pubDate>Sun, 11 May 2025 10:29:30 +0800</pubDate><guid>https://xinchentechnote.github.io/note/p/java-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8B%BC%E6%8E%A5%E6%80%A7%E8%83%BD%E5%AE%9E%E6%B5%8B%E5%9F%BA%E4%BA%8E-jmh-%E7%9A%84%E5%BE%AE%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95/</guid><description>&lt;h1 id="java-字符串拼接性能实测基于-jmh-的微基准测试">Java 字符串拼接性能实测：基于 JMH 的微基准测试
&lt;/h1>&lt;p>在 Java 开发中，字符串拼接操作无处不在。你可能会直接使用 &lt;code>+&lt;/code>，也可能选择 &lt;code>StringBuilder&lt;/code> 或 &lt;code>StringBuffer&lt;/code>。它们在性能上究竟有何差别？在循环中拼接多个字符串时，哪种方式更高效？&lt;/p>
&lt;p>本文基于 JMH（Java Microbenchmark Harness）进行了系统性测试，并使用 GitHub Actions 在 Ubuntu 环境中实测了不同字符串拼接方式的性能。&lt;/p>
&lt;hr>
&lt;h2 id="-测试目标">🧪 测试目标
&lt;/h2>&lt;p>比较以下三种拼接方式在高频场景下的性能差异：&lt;/p>
&lt;ol>
&lt;li>&lt;code>+&lt;/code> 操作符（语法糖，编译期转为 &lt;code>StringBuilder.append&lt;/code>）&lt;/li>
&lt;li>&lt;code>StringBuilder.append&lt;/code>&lt;/li>
&lt;li>&lt;code>StringBuffer.append&lt;/code>&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2 id="-项目创建与配置maven">🧰 项目创建与配置（Maven）
&lt;/h2>&lt;h3 id="1-创建基础工程">1. 创建基础工程
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">mvn archetype:generate &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -DgroupId&lt;span class="o">=&lt;/span>com.xinchentechnote &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -DartifactId&lt;span class="o">=&lt;/span>string-jmh &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -DarchetypeArtifactId&lt;span class="o">=&lt;/span>maven-archetype-quickstart &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -DinteractiveMode&lt;span class="o">=&lt;/span>&lt;span class="nb">false&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="2-配置-pomxml">2. 配置 &lt;code>pom.xml&lt;/code>
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">&amp;lt;dependencies&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.openjdk.jmh&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>jmh-core&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>1.37&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.openjdk.jmh&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>jmh-generator-annprocess&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>1.37&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;scope&amp;gt;&lt;/span>provided&lt;span class="nt">&amp;lt;/scope&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nt">&amp;lt;/dependencies&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nt">&amp;lt;build&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;plugins&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;plugin&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.apache.maven.plugins&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>maven-compiler-plugin&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>3.8.1&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;configuration&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;source&amp;gt;&lt;/span>17&lt;span class="nt">&amp;lt;/source&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;target&amp;gt;&lt;/span>17&lt;span class="nt">&amp;lt;/target&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;annotationProcessorPaths&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;path&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.openjdk.jmh&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>jmh-generator-annprocess&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>1.37&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;/path&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;/annotationProcessorPaths&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;/configuration&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;/plugin&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;/plugins&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nt">&amp;lt;/build&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h2 id="-测试代码实现">📄 测试代码实现
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">package&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nn">com.xinchentechnote&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kn">import&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nn">org.openjdk.jmh.annotations.*&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kn">import&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nn">java.util.concurrent.TimeUnit&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nd">@BenchmarkMode&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="n">Mode&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">Throughput&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Mode&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">AverageTime&lt;/span>&lt;span class="p">})&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nd">@OutputTimeUnit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">TimeUnit&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">MICROSECONDS&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nd">@State&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Scope&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">Thread&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">StringConcatBenchmark&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">str1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;Hello&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">str2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;World&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">str3&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;Java&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">100&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@Benchmark&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">testStringBuilder&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">StringBuilder&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">sb&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">StringBuilder&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">sb&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">str1&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">sb&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">str2&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">sb&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">str3&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">sb&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">toString&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@Benchmark&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">testStringBuffer&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">StringBuffer&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">sb&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">StringBuffer&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">sb&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">str1&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">sb&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">str2&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">sb&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">str3&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">sb&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">toString&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@Benchmark&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">testStringPlus&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">str1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">str2&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">str3&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h2 id="-github-actions-自动化测试配置">🚀 GitHub Actions 自动化测试配置
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">JMH Benchmarks&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">on&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">workflow_dispatch&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">jobs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">benchmark&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">runs-on&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ubuntu-latest&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">steps&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">actions/checkout@v3&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">actions/setup-java@v3&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">with&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">distribution&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">temurin&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">java-version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;17&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">cache&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">maven&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">mvn clean install -DskipTests&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">java -jar target/benchmarks.jar StringConcatBenchmark&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h2 id="-实测结果ubuntu--github-actions">📊 实测结果（Ubuntu + GitHub Actions）
&lt;/h2>&lt;h3 id="-吞吐量测试throughput">📈 吞吐量测试（Throughput）
&lt;/h3>&lt;p>单位：每微秒执行的操作数（ops/us）&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>方法&lt;/th>
&lt;th>吞吐量&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>StringBuilder&lt;/code>&lt;/td>
&lt;td>&lt;strong>0.478 ops/us&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>StringBuffer&lt;/code>&lt;/td>
&lt;td>0.448 ops/us&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>+&lt;/code> 操作符&lt;/td>
&lt;td>🚫 0.199 ops/us&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="-平均耗时测试averagetime">⏱ 平均耗时测试（AverageTime）
&lt;/h3>&lt;p>单位：每次操作的平均耗时（us/op）&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>方法&lt;/th>
&lt;th>平均耗时&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>StringBuilder&lt;/code>&lt;/td>
&lt;td>&lt;strong>2.021 us/op&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>StringBuffer&lt;/code>&lt;/td>
&lt;td>2.237 us/op&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>+&lt;/code> 操作符&lt;/td>
&lt;td>🚫 5.244 us/op&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2 id="-原理解析">🔍 原理解析
&lt;/h2>&lt;ul>
&lt;li>&lt;code>StringBuilder&lt;/code>：非线程安全但性能最好，推荐在循环中使用。&lt;/li>
&lt;li>&lt;code>StringBuffer&lt;/code>：线程安全但性能略低。&lt;/li>
&lt;li>&lt;code>+&lt;/code> 操作符：虽然直观，但在循环中极其低效，会频繁创建临时对象，带来 GC 压力。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="-使用建议">✅ 使用建议
&lt;/h2>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>拼接方式&lt;/th>
&lt;th>优点&lt;/th>
&lt;th>缺点&lt;/th>
&lt;th>推荐场景&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>StringBuilder&lt;/td>
&lt;td>性能最佳&lt;/td>
&lt;td>非线程安全&lt;/td>
&lt;td>单线程高频拼接&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>StringBuffer&lt;/td>
&lt;td>线程安全&lt;/td>
&lt;td>性能略差&lt;/td>
&lt;td>多线程拼接场景&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>+&lt;/code> 操作符&lt;/td>
&lt;td>简洁直观&lt;/td>
&lt;td>慢且 GC 压力大&lt;/td>
&lt;td>低频简易拼接&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2 id="-总结">🏁 总结
&lt;/h2>&lt;p>本次 JMH 实测验证了开发经验中的最佳实践：&lt;strong>在高频场景中，推荐使用 &lt;code>StringBuilder&lt;/code> 进行字符串拼接。&lt;/strong>&lt;/p>
&lt;hr>
&lt;h3 id="-jmh-小知识java-微基准测试利器">💡 JMH 小知识：Java 微基准测试利器
&lt;/h3>&lt;p>&lt;a class="link" href="https://openjdk.org/projects/code-tools/jmh/" target="_blank" rel="noopener"
>JMH (Java Microbenchmark Harness)&lt;/a> 是由 Oracle 和 OpenJDK 团队专为 Java 编写的微基准测试框架，用于衡量 Java 方法在纳秒到微秒级别的性能表现。JMH 特别适用于需要精细分析方法调用开销、编译优化、副作用等对性能影响的场景。&lt;/p>
&lt;h4 id="核心术语与注解解释">核心术语与注解解释：
&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>注解或参数&lt;/th>
&lt;th>含义&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>@Benchmark&lt;/code>&lt;/td>
&lt;td>标记要被测试的方法。每次运行都调用它并收集性能数据。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>@BenchmarkMode&lt;/code>&lt;/td>
&lt;td>设置基准测试的模式（如吞吐量、平均时间等）。可选值包括：- &lt;code>Throughput&lt;/code>: 单位时间内操作次数- &lt;code>AverageTime&lt;/code>: 每个操作平均耗时- &lt;code>SampleTime&lt;/code>, &lt;code>SingleShotTime&lt;/code>, &lt;code>AllModes&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>@OutputTimeUnit&lt;/code>&lt;/td>
&lt;td>设置输出结果的时间单位，如 &lt;code>TimeUnit.MILLISECONDS&lt;/code> 或 &lt;code>MICROSECONDS&lt;/code>。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>@State&lt;/code>&lt;/td>
&lt;td>用于管理基准方法所需的状态变量作用域。常用 &lt;code>Scope.Thread&lt;/code> 表示每线程独立状态。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>@Fork&lt;/code>&lt;/td>
&lt;td>设置执行几轮 JVM 启动来规避 JVM 热身阶段的影响，通常设置为 1~3。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>@Warmup&lt;/code>&lt;/td>
&lt;td>预热次数与每次持续时间（JIT 编译优化发生在此阶段）。避免冷启动影响基准数据。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>@Measurement&lt;/code>&lt;/td>
&lt;td>真正采集性能数据的次数和持续时间。建议至少 &lt;code>5 次 × 1s+&lt;/code>。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="推荐配置参数说明">推荐配置参数说明：
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@BenchmarkMode&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="n">Mode&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">Throughput&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Mode&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">AverageTime&lt;/span>&lt;span class="p">})&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 同时测吞吐量和平均耗时&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nd">@OutputTimeUnit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">TimeUnit&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">MICROSECONDS&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 输出微秒为单位&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nd">@State&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Scope&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">Thread&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 每个线程独立状态&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nd">@Fork&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 启动 1 次 JVM&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nd">@Warmup&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">iterations&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">time&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 预热 5 次，每次 1 秒&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nd">@Measurement&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">iterations&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">time&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 采样 5 次，每次 1 秒&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="为什么不能简单用-systemcurrenttimemillis">为什么不能简单用 System.currentTimeMillis？
&lt;/h4>&lt;p>因为 JVM 启动初期 JIT 编译未完成、内联尚未展开、逃逸分析等优化机制尚未介入，初始运行的耗时非常不稳定。而 JMH 通过：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>自动 warm-up 预热阶段；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>多轮 fork JVM 隔离优化影响；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>统计误差和波动范围（Error）；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>确保了测得结果更真实、更接近应用实际表现。&lt;/p>
&lt;hr>
&lt;p>希望本文能为你在日常开发与性能优化中提供量化参考！
&lt;em>作者：xinchen&lt;/em>
&lt;em>首次发布日期：2025-05-25&lt;/em>
&lt;em>版权所有 © 2025&lt;/em>
&lt;em>作者信息：af83f787e8911dea9b3bf677746ebac9&lt;/em>&lt;/p></description></item></channel></rss>